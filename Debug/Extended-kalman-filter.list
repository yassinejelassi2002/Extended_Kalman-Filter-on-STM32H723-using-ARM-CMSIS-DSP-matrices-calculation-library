
Extended-kalman-filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080056b0  080056b0  000066b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058f8  080058f8  000068f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080058fc  080058fc  000068fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  08005900  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  2400007c  0800597c  0000707c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  0800597c  00007284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ef3c  00000000  00000000  000070aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000249f  00000000  00000000  00015fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000de0  00000000  00000000  00018488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a0b  00000000  00000000  00019268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000330ec  00000000  00000000  00019c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010041  00000000  00000000  0004cd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147d38  00000000  00000000  0005cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  001a4ad8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042f0  00000000  00000000  001a4b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001a8e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000159b  00000000  00000000  001a8ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  001aa48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005694 	.word	0x08005694

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08005694 	.word	0x08005694

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <EKF_Init>:
              float* Hx_buffer,
              float* K_buffer,
              state_func_t f,
              meas_func_t h,
              jacobian_func_t F_jacobian,
              jacobian_func_t H_jacobian) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	817b      	strh	r3, [r7, #10]
 8000736:	4613      	mov	r3, r2
 8000738:	813b      	strh	r3, [r7, #8]
    ekf->dim_x = dim_x;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	897a      	ldrh	r2, [r7, #10]
 800073e:	801a      	strh	r2, [r3, #0]
    ekf->dim_z = dim_z;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	893a      	ldrh	r2, [r7, #8]
 8000744:	805a      	strh	r2, [r3, #2]

    ekf->x_data = x_buffer;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	64da      	str	r2, [r3, #76]	@ 0x4c
    ekf->P_data = P_buffer;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	651a      	str	r2, [r3, #80]	@ 0x50
    ekf->Q_data = Q_buffer;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	69fa      	ldr	r2, [r7, #28]
 8000756:	655a      	str	r2, [r3, #84]	@ 0x54
    ekf->R_data = R_buffer;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6a3a      	ldr	r2, [r7, #32]
 800075c:	659a      	str	r2, [r3, #88]	@ 0x58
    ekf->Fx_data = Fx_buffer;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000762:	65da      	str	r2, [r3, #92]	@ 0x5c
    ekf->Hx_data = Hx_buffer;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000768:	661a      	str	r2, [r3, #96]	@ 0x60
    ekf->K_data = K_buffer;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800076e:	665a      	str	r2, [r3, #100]	@ 0x64

    arm_mat_init_f32(&ekf->x, dim_x, 1, ekf->x_data);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	1d18      	adds	r0, r3, #4
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	8979      	ldrh	r1, [r7, #10]
 800077a:	2201      	movs	r2, #1
 800077c:	f003 fd92 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->P, dim_x, dim_x, ekf->P_data);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f103 000c 	add.w	r0, r3, #12
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800078a:	897a      	ldrh	r2, [r7, #10]
 800078c:	8979      	ldrh	r1, [r7, #10]
 800078e:	f003 fd89 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->Q, dim_x, dim_x, ekf->Q_data);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f103 0014 	add.w	r0, r3, #20
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800079c:	897a      	ldrh	r2, [r7, #10]
 800079e:	8979      	ldrh	r1, [r7, #10]
 80007a0:	f003 fd80 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->R, dim_z, dim_z, ekf->R_data);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f103 001c 	add.w	r0, r3, #28
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ae:	893a      	ldrh	r2, [r7, #8]
 80007b0:	8939      	ldrh	r1, [r7, #8]
 80007b2:	f003 fd77 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->Fx, dim_x, dim_x, ekf->Fx_data);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007c0:	897a      	ldrh	r2, [r7, #10]
 80007c2:	8979      	ldrh	r1, [r7, #10]
 80007c4:	f003 fd6e 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->Hx, dim_z, dim_x, ekf->Hx_data);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	897a      	ldrh	r2, [r7, #10]
 80007d4:	8939      	ldrh	r1, [r7, #8]
 80007d6:	f003 fd65 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&ekf->K, dim_x, dim_z, ekf->K_data);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80007e4:	893a      	ldrh	r2, [r7, #8]
 80007e6:	8979      	ldrh	r1, [r7, #10]
 80007e8:	f003 fd5c 	bl	80042a4 <arm_mat_init_f32>

    // Initialize function pointers
    ekf->f = f;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
    ekf->h = h;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
    ekf->F_jacobian = F_jacobian;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    ekf->H_jacobian = H_jacobian;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000802:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <EKF_Predict>:

void EKF_Predict(EKF_HandleTypeDef* ekf,  arm_matrix_instance_f32* u, float dt) {
 800080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	b091      	sub	sp, #68	@ 0x44
 8000812:	af00      	add	r7, sp, #0
 8000814:	6178      	str	r0, [r7, #20]
 8000816:	6139      	str	r1, [r7, #16]
 8000818:	ed87 0a03 	vstr	s0, [r7, #12]
 800081c:	466b      	mov	r3, sp
 800081e:	461e      	mov	r6, r3
    float x_pred_data[ekf->dim_x];
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	8819      	ldrh	r1, [r3, #0]
 8000824:	460b      	mov	r3, r1
 8000826:	3b01      	subs	r3, #1
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800082a:	b28b      	uxth	r3, r1
 800082c:	2200      	movs	r2, #0
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	f04f 0200 	mov.w	r2, #0
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	0143      	lsls	r3, r0, #5
 800083e:	6838      	ldr	r0, [r7, #0]
 8000840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	0142      	lsls	r2, r0, #5
 8000848:	b28b      	uxth	r3, r1
 800084a:	2200      	movs	r2, #0
 800084c:	469a      	mov	sl, r3
 800084e:	4693      	mov	fp, r2
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800085c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000860:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000864:	460b      	mov	r3, r1
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	3307      	adds	r3, #7
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	ebad 0d03 	sub.w	sp, sp, r3
 8000872:	466b      	mov	r3, sp
 8000874:	3303      	adds	r3, #3
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
    arm_matrix_instance_f32 x_pred;
    arm_mat_init_f32(&x_pred, ekf->dim_x, 1, x_pred_data);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	8819      	ldrh	r1, [r3, #0]
 8000880:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000886:	2201      	movs	r2, #1
 8000888:	f003 fd0c 	bl	80042a4 <arm_mat_init_f32>

    ekf->f(&ekf->x, u, dt, &x_pred);
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	1d10      	adds	r0, r2, #4
 8000894:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000898:	ed97 0a03 	vldr	s0, [r7, #12]
 800089c:	6939      	ldr	r1, [r7, #16]
 800089e:	4798      	blx	r3

    ekf->F_jacobian(&ekf->x, u, dt, &ekf->Fx);
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	1d10      	adds	r0, r2, #4
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	3234      	adds	r2, #52	@ 0x34
 80008ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80008b0:	6939      	ldr	r1, [r7, #16]
 80008b2:	4798      	blx	r3

    // x = f(x,u)
    /*
     * TODO replace the memcpy with cmsis
     */
    memcpy(ekf->x.pData, x_pred.pData, sizeof(float)*ekf->dim_x);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	6898      	ldr	r0, [r3, #8]
 80008b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	461a      	mov	r2, r3
 80008c2:	f003 ff0e 	bl	80046e2 <memcpy>

    // P = F P F^T + Q
    float temp_data[ekf->dim_x * ekf->dim_x];
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	fb03 f102 	mul.w	r1, r3, r2
 80008d4:	1e4b      	subs	r3, r1, #1
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80008d8:	460a      	mov	r2, r1
 80008da:	2300      	movs	r3, #0
 80008dc:	4690      	mov	r8, r2
 80008de:	4699      	mov	r9, r3
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80008ec:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80008f0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80008f4:	460a      	mov	r2, r1
 80008f6:	2300      	movs	r3, #0
 80008f8:	4614      	mov	r4, r2
 80008fa:	461d      	mov	r5, r3
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	016b      	lsls	r3, r5, #5
 8000906:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800090a:	0162      	lsls	r2, r4, #5
 800090c:	460b      	mov	r3, r1
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	3307      	adds	r3, #7
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	ebad 0d03 	sub.w	sp, sp, r3
 800091a:	466b      	mov	r3, sp
 800091c:	3303      	adds	r3, #3
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
    arm_matrix_instance_f32 temp, FxT;
    arm_mat_init_f32(&temp, ekf->dim_x, ekf->dim_x, temp_data);
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	8819      	ldrh	r1, [r3, #0]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	f107 0020 	add.w	r0, r7, #32
 8000930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000932:	f003 fcb7 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&FxT, ekf->dim_x, ekf->dim_x, temp_data); // reuse buffer for transpose
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	8819      	ldrh	r1, [r3, #0]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	f107 0018 	add.w	r0, r7, #24
 8000942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000944:	f003 fcae 	bl	80042a4 <arm_mat_init_f32>

    arm_mat_mult_f32(&ekf->Fx, &ekf->P, &temp);
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	330c      	adds	r3, #12
 8000952:	f107 0220 	add.w	r2, r7, #32
 8000956:	4619      	mov	r1, r3
 8000958:	f003 fab2 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&ekf->Fx, &FxT);
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3334      	adds	r3, #52	@ 0x34
 8000960:	f107 0218 	add.w	r2, r7, #24
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f003 f9e0 	bl	8003d2c <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp, &FxT, &ekf->P);
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f103 020c 	add.w	r2, r3, #12
 8000972:	f107 0118 	add.w	r1, r7, #24
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	4618      	mov	r0, r3
 800097c:	f003 faa0 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_add_f32(&ekf->P, &ekf->Q, &ekf->P);
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f103 000c 	add.w	r0, r3, #12
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f103 0114 	add.w	r1, r3, #20
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	330c      	adds	r3, #12
 8000990:	461a      	mov	r2, r3
 8000992:	f003 fc8b 	bl	80042ac <arm_mat_add_f32>
    X_data_predicted_probe=ekf->x.pData[0];
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a03      	ldr	r2, [pc, #12]	@ (80009ac <EKF_Predict+0x1a0>)
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	46b5      	mov	sp, r6
}
 80009a2:	bf00      	nop
 80009a4:	3744      	adds	r7, #68	@ 0x44
 80009a6:	46bd      	mov	sp, r7
 80009a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ac:	2400009c 	.word	0x2400009c

080009b0 <EKF_Update>:

void EKF_Update(EKF_HandleTypeDef* ekf,  arm_matrix_instance_f32* z) {
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b4:	b0d3      	sub	sp, #332	@ 0x14c
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80009bc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80009c0:	466b      	mov	r3, sp
 80009c2:	607b      	str	r3, [r7, #4]
    ekf->H_jacobian(&ekf->x, NULL, 0, &ekf->Hx);
 80009c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009c8:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80009ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009ce:	1d18      	adds	r0, r3, #4
 80009d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009d4:	333c      	adds	r3, #60	@ 0x3c
 80009d6:	461a      	mov	r2, r3
 80009d8:	ed9f 0ae9 	vldr	s0, [pc, #932]	@ 8000d80 <EKF_Update+0x3d0>
 80009dc:	2100      	movs	r1, #0
 80009de:	47b0      	blx	r6

    float z_pred_data[ekf->dim_z];
 80009e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009e4:	8859      	ldrh	r1, [r3, #2]
 80009e6:	460b      	mov	r3, r1
 80009e8:	3b01      	subs	r3, #1
 80009ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80009ee:	b28b      	uxth	r3, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	461c      	mov	r4, r3
 80009f4:	4615      	mov	r5, r2
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	016b      	lsls	r3, r5, #5
 8000a00:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a04:	0162      	lsls	r2, r4, #5
 8000a06:	b28b      	uxth	r3, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	4691      	mov	r9, r2
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a1a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a1e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a22:	460b      	mov	r3, r1
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	3307      	adds	r3, #7
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a30:	466b      	mov	r3, sp
 8000a32:	3303      	adds	r3, #3
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    arm_matrix_instance_f32 z_pred;
    arm_mat_init_f32(&z_pred, ekf->dim_z, 1, z_pred_data);
 8000a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a40:	8859      	ldrh	r1, [r3, #2]
 8000a42:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 8000a46:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f003 fc2a 	bl	80042a4 <arm_mat_init_f32>

    ekf->h(&ekf->x, &z_pred);
 8000a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a54:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8000a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a5a:	1d1a      	adds	r2, r3, #4
 8000a5c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a60:	4619      	mov	r1, r3
 8000a62:	4610      	mov	r0, r2
 8000a64:	47a0      	blx	r4

    // y = z - h(x)
    float y_data[ekf->dim_z];
 8000a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a6a:	8859      	ldrh	r1, [r3, #2]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000a74:	b28b      	uxth	r3, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	469a      	mov	sl, r3
 8000a7a:	4693      	mov	fp, r2
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000a88:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000a8c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000a90:	b28b      	uxth	r3, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	0143      	lsls	r3, r0, #5
 8000aac:	4620      	mov	r0, r4
 8000aae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	0142      	lsls	r2, r0, #5
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3307      	adds	r3, #7
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    arm_matrix_instance_f32 y;
    arm_mat_init_f32(&y, ekf->dim_z, 1, y_data);
 8000ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ad4:	8859      	ldrh	r1, [r3, #2]
 8000ad6:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8000ada:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f003 fbe0 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_sub_f32(z, &z_pred, &y);
 8000ae4:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8000ae8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000aec:	4619      	mov	r1, r3
 8000aee:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000af2:	f003 f989 	bl	8003e08 <arm_mat_sub_f32>

    // S = H P H^T + R
    float HP_data[ekf->dim_z * ekf->dim_x];
 8000af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	461a      	mov	r2, r3
 8000afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	fb03 f102 	mul.w	r1, r3, r2
 8000b08:	1e4b      	subs	r3, r1, #1
 8000b0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000b0e:	460a      	mov	r2, r1
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	f04f 0300 	mov.w	r3, #0
 8000b22:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000b26:	4628      	mov	r0, r5
 8000b28:	0143      	lsls	r3, r0, #5
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000b30:	4620      	mov	r0, r4
 8000b32:	0142      	lsls	r2, r0, #5
 8000b34:	460a      	mov	r2, r1
 8000b36:	2300      	movs	r3, #0
 8000b38:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000b3c:	f04f 0200 	mov.w	r2, #0
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000b48:	4628      	mov	r0, r5
 8000b4a:	0143      	lsls	r3, r0, #5
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000b52:	4620      	mov	r0, r4
 8000b54:	0142      	lsls	r2, r0, #5
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	3307      	adds	r3, #7
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	ebad 0d03 	sub.w	sp, sp, r3
 8000b64:	466b      	mov	r3, sp
 8000b66:	3303      	adds	r3, #3
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    float HxT_data[ekf->dim_x * ekf->dim_z];
 8000b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b7c:	885b      	ldrh	r3, [r3, #2]
 8000b7e:	fb03 f102 	mul.w	r1, r3, r2
 8000b82:	1e4b      	subs	r3, r1, #1
 8000b84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000b88:	460a      	mov	r2, r1
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	673a      	str	r2, [r7, #112]	@ 0x70
 8000b8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	0143      	lsls	r3, r0, #5
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	0142      	lsls	r2, r0, #5
 8000baa:	460a      	mov	r2, r1
 8000bac:	2300      	movs	r3, #0
 8000bae:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	0143      	lsls	r3, r0, #5
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000bc8:	4620      	mov	r0, r4
 8000bca:	0142      	lsls	r2, r0, #5
 8000bcc:	460b      	mov	r3, r1
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	3307      	adds	r3, #7
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bda:	466b      	mov	r3, sp
 8000bdc:	3303      	adds	r3, #3
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    float S_data[ekf->dim_z * ekf->dim_z];
 8000be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	fb03 f102 	mul.w	r1, r3, r2
 8000bf8:	1e4b      	subs	r3, r1, #1
 8000bfa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000bfe:	460a      	mov	r2, r1
 8000c00:	2300      	movs	r3, #0
 8000c02:	663a      	str	r2, [r7, #96]	@ 0x60
 8000c04:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000c12:	4628      	mov	r0, r5
 8000c14:	0143      	lsls	r3, r0, #5
 8000c16:	4620      	mov	r0, r4
 8000c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	0142      	lsls	r2, r0, #5
 8000c20:	460a      	mov	r2, r1
 8000c22:	2300      	movs	r3, #0
 8000c24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8000c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000c34:	4628      	mov	r0, r5
 8000c36:	0143      	lsls	r3, r0, #5
 8000c38:	4620      	mov	r0, r4
 8000c3a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c3e:	4620      	mov	r0, r4
 8000c40:	0142      	lsls	r2, r0, #5
 8000c42:	460b      	mov	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	3307      	adds	r3, #7
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c50:	466b      	mov	r3, sp
 8000c52:	3303      	adds	r3, #3
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    arm_matrix_instance_f32 HP, HxT, S;
    arm_mat_init_f32(&HP, ekf->dim_z, ekf->dim_x, HP_data);
 8000c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c60:	8859      	ldrh	r1, [r3, #2]
 8000c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8000c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c70:	f003 fb18 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&HxT, ekf->dim_x, ekf->dim_z, HxT_data);
 8000c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c78:	8819      	ldrh	r1, [r3, #0]
 8000c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c7e:	885a      	ldrh	r2, [r3, #2]
 8000c80:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8000c84:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c88:	f003 fb0c 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&S, ekf->dim_z, ekf->dim_z, S_data);
 8000c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c90:	8859      	ldrh	r1, [r3, #2]
 8000c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c96:	885a      	ldrh	r2, [r3, #2]
 8000c98:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8000c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ca0:	f003 fb00 	bl	80042a4 <arm_mat_init_f32>

    arm_mat_mult_f32(&ekf->Hx, &ekf->P, &HP);
 8000ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ca8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8000cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cb0:	f103 010c 	add.w	r1, r3, #12
 8000cb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f003 f901 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_trans_f32(&ekf->Hx, &HxT);
 8000cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cc2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8000cc6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4610      	mov	r0, r2
 8000cce:	f003 f82d 	bl	8003d2c <arm_mat_trans_f32>
    arm_mat_mult_f32(&HP, &HxT, &S);
 8000cd2:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8000cd6:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8000cda:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f8ee 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_add_f32(&S, &ekf->R, &S);
 8000ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ce8:	f103 011c 	add.w	r1, r3, #28
 8000cec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cf0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f003 fad9 	bl	80042ac <arm_mat_add_f32>

    // Compute inverse of S
    arm_matrix_instance_f32 S_inv;
    float S_inv_data[ekf->dim_z * ekf->dim_z];
 8000cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000cfe:	885b      	ldrh	r3, [r3, #2]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d06:	885b      	ldrh	r3, [r3, #2]
 8000d08:	fb03 f102 	mul.w	r1, r3, r2
 8000d0c:	1e4b      	subs	r3, r1, #1
 8000d0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000d12:	460a      	mov	r2, r1
 8000d14:	2300      	movs	r3, #0
 8000d16:	653a      	str	r2, [r7, #80]	@ 0x50
 8000d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000d26:	4628      	mov	r0, r5
 8000d28:	0143      	lsls	r3, r0, #5
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000d30:	4620      	mov	r0, r4
 8000d32:	0142      	lsls	r2, r0, #5
 8000d34:	460a      	mov	r2, r1
 8000d36:	2300      	movs	r3, #0
 8000d38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000d48:	4628      	mov	r0, r5
 8000d4a:	0143      	lsls	r3, r0, #5
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000d52:	4620      	mov	r0, r4
 8000d54:	0142      	lsls	r2, r0, #5
 8000d56:	460b      	mov	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	ebad 0d03 	sub.w	sp, sp, r3
 8000d64:	466b      	mov	r3, sp
 8000d66:	3303      	adds	r3, #3
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    arm_mat_init_f32(&S_inv, ekf->dim_z, ekf->dim_z, S_inv_data);
 8000d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d74:	8859      	ldrh	r1, [r3, #2]
 8000d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d7a:	885a      	ldrh	r2, [r3, #2]
 8000d7c:	e002      	b.n	8000d84 <EKF_Update+0x3d4>
 8000d7e:	bf00      	nop
 8000d80:	00000000 	.word	0x00000000
 8000d84:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8000d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d8c:	f003 fa8a 	bl	80042a4 <arm_mat_init_f32>
    if (arm_mat_inverse_f32(&S, &S_inv) != ARM_MATH_SUCCESS) {
 8000d90:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8000d94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 f93a 	bl	8004014 <arm_mat_inverse_f32>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <EKF_Update+0x3fc>
        // Handle inversion failure (singular matrix)
        return;
 8000da6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8000daa:	e1b5      	b.n	8001118 <EKF_Update+0x768>
    }

    // K = P H^T S^{-1}
    float PHt_data[ekf->dim_x * ekf->dim_z];
 8000dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f102 	mul.w	r1, r3, r2
 8000dbe:	1e4b      	subs	r3, r1, #1
 8000dc0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000dd8:	4628      	mov	r0, r5
 8000dda:	0143      	lsls	r3, r0, #5
 8000ddc:	4620      	mov	r0, r4
 8000dde:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000de2:	4620      	mov	r0, r4
 8000de4:	0142      	lsls	r2, r0, #5
 8000de6:	460a      	mov	r2, r1
 8000de8:	2300      	movs	r3, #0
 8000dea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	0143      	lsls	r3, r0, #5
 8000dfe:	4620      	mov	r0, r4
 8000e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e04:	4620      	mov	r0, r4
 8000e06:	0142      	lsls	r2, r0, #5
 8000e08:	460b      	mov	r3, r1
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3307      	adds	r3, #7
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	ebad 0d03 	sub.w	sp, sp, r3
 8000e16:	466b      	mov	r3, sp
 8000e18:	3303      	adds	r3, #3
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    arm_matrix_instance_f32 PHt;
    arm_mat_init_f32(&PHt, ekf->dim_x, ekf->dim_z, PHt_data);
 8000e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e26:	8819      	ldrh	r1, [r3, #0]
 8000e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e2c:	885a      	ldrh	r2, [r3, #2]
 8000e2e:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8000e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e36:	f003 fa35 	bl	80042a4 <arm_mat_init_f32>

    arm_mat_mult_f32(&ekf->P, &HxT, &PHt);
 8000e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e3e:	f103 000c 	add.w	r0, r3, #12
 8000e42:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000e46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f003 f838 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_mult_f32(&PHt, &S_inv, &ekf->K);
 8000e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e54:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8000e58:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8000e5c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 f82d 	bl	8003ec0 <arm_mat_mult_f32>

    // x = x + K y
    float Ky_data[ekf->dim_x];
 8000e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e6a:	8819      	ldrh	r1, [r3, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000e74:	b28b      	uxth	r3, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7a:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000e88:	4628      	mov	r0, r5
 8000e8a:	0143      	lsls	r3, r0, #5
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e92:	4620      	mov	r0, r4
 8000e94:	0142      	lsls	r2, r0, #5
 8000e96:	b28b      	uxth	r3, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000eaa:	4628      	mov	r0, r5
 8000eac:	0143      	lsls	r3, r0, #5
 8000eae:	4620      	mov	r0, r4
 8000eb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	0142      	lsls	r2, r0, #5
 8000eb8:	460b      	mov	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec6:	466b      	mov	r3, sp
 8000ec8:	3303      	adds	r3, #3
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    arm_matrix_instance_f32 Ky;
    arm_mat_init_f32(&Ky, ekf->dim_x, 1, Ky_data);
 8000ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ed6:	8819      	ldrh	r1, [r3, #0]
 8000ed8:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8000edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f003 f9df 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_mult_f32(&ekf->K, &y, &Ky);
 8000ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000eea:	3344      	adds	r3, #68	@ 0x44
 8000eec:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000ef0:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 ffe3 	bl	8003ec0 <arm_mat_mult_f32>
    arm_mat_add_f32(&ekf->x, &Ky, &ekf->x);
 8000efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000efe:	1d18      	adds	r0, r3, #4
 8000f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f04:	1d1a      	adds	r2, r3, #4
 8000f06:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f003 f9ce 	bl	80042ac <arm_mat_add_f32>

    // P = (I - K H) P
    float KH_data[ekf->dim_x * ekf->dim_x];
 8000f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	fb03 f102 	mul.w	r1, r3, r2
 8000f22:	1e4b      	subs	r3, r1, #1
 8000f24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f28:	460a      	mov	r2, r1
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623a      	str	r2, [r7, #32]
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	0143      	lsls	r3, r0, #5
 8000f40:	4620      	mov	r0, r4
 8000f42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f46:	4620      	mov	r0, r4
 8000f48:	0142      	lsls	r2, r0, #5
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61ba      	str	r2, [r7, #24]
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000f5e:	4628      	mov	r0, r5
 8000f60:	0143      	lsls	r3, r0, #5
 8000f62:	4620      	mov	r0, r4
 8000f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f68:	4620      	mov	r0, r4
 8000f6a:	0142      	lsls	r2, r0, #5
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	3307      	adds	r3, #7
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7a:	466b      	mov	r3, sp
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    arm_matrix_instance_f32 KH;
    arm_mat_init_f32(&KH, ekf->dim_x, ekf->dim_x, KH_data);
 8000f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f8a:	8819      	ldrh	r1, [r3, #0]
 8000f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8000f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000f9a:	f003 f983 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_mult_f32(&ekf->K, &ekf->Hx, &KH);
 8000f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fa2:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000faa:	333c      	adds	r3, #60	@ 0x3c
 8000fac:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f002 ff85 	bl	8003ec0 <arm_mat_mult_f32>

    float I_data[ekf->dim_x * ekf->dim_x];
 8000fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	fb03 f102 	mul.w	r1, r3, r2
 8000fc8:	1e4b      	subs	r3, r1, #1
 8000fca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fce:	460a      	mov	r2, r1
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613a      	str	r2, [r7, #16]
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	0143      	lsls	r3, r0, #5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fec:	4620      	mov	r0, r4
 8000fee:	0142      	lsls	r2, r0, #5
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001004:	4628      	mov	r0, r5
 8001006:	0143      	lsls	r3, r0, #5
 8001008:	4620      	mov	r0, r4
 800100a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800100e:	4620      	mov	r0, r4
 8001010:	0142      	lsls	r2, r0, #5
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3307      	adds	r3, #7
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	ebad 0d03 	sub.w	sp, sp, r3
 8001020:	466b      	mov	r3, sp
 8001022:	3303      	adds	r3, #3
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    arm_matrix_instance_f32 I, I_minus_KH;
    arm_mat_init_f32(&I, ekf->dim_x, ekf->dim_x, I_data);
 800102c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800103c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001040:	f003 f930 	bl	80042a4 <arm_mat_init_f32>
    arm_mat_init_f32(&I_minus_KH, ekf->dim_x, ekf->dim_x, I_data); // reuse I_data buffer
 8001044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001048:	8819      	ldrh	r1, [r3, #0]
 800104a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800104e:	881a      	ldrh	r2, [r3, #0]
 8001050:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001058:	f003 f924 	bl	80042a4 <arm_mat_init_f32>

    // Create identity matrix
    for (uint16_t i = 0; i < ekf->dim_x * ekf->dim_x; i++) I_data[i] = 0.0f;
 800105c:	2300      	movs	r3, #0
 800105e:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
 8001062:	e00d      	b.n	8001080 <EKF_Update+0x6d0>
 8001064:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8001068:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 800107a:	3301      	adds	r3, #1
 800107c:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
 8001080:	f8b7 2146 	ldrh.w	r2, [r7, #326]	@ 0x146
 8001084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	429a      	cmp	r2, r3
 8001098:	dbe4      	blt.n	8001064 <EKF_Update+0x6b4>
    for (uint16_t i = 0; i < ekf->dim_x; i++) I_data[i * ekf->dim_x + i] = 1.0f;
 800109a:	2300      	movs	r3, #0
 800109c:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
 80010a0:	e015      	b.n	80010ce <EKF_Update+0x71e>
 80010a2:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80010a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	fb03 f202 	mul.w	r2, r3, r2
 80010b0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80010b4:	4413      	add	r3, r2
 80010b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80010c8:	3301      	adds	r3, #1
 80010ca:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
 80010ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3e2      	bcc.n	80010a2 <EKF_Update+0x6f2>

    arm_mat_sub_f32(&I, &KH, &I_minus_KH);
 80010dc:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80010e0:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80010e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fe8d 	bl	8003e08 <arm_mat_sub_f32>
    arm_mat_mult_f32(&I_minus_KH, &ekf->P, &ekf->P);
 80010ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010f2:	f103 010c 	add.w	r1, r3, #12
 80010f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010fa:	f103 020c 	add.w	r2, r3, #12
 80010fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fedc 	bl	8003ec0 <arm_mat_mult_f32>

    X_data_updated_probe = ekf->x.pData[0];
 8001108:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <EKF_Update+0x774>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001118:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800111c:	46bd      	mov	sp, r7
 800111e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001122:	bf00      	nop
 8001124:	24000098 	.word	0x24000098

08001128 <EKF_Step>:

void EKF_Step(EKF_HandleTypeDef* ekf,  arm_matrix_instance_f32* u,  arm_matrix_instance_f32* z, float dt) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	ed87 0a00 	vstr	s0, [r7]
    EKF_Predict(ekf, u, dt);
 8001138:	ed97 0a00 	vldr	s0, [r7]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fb64 	bl	800080c <EKF_Predict>
    EKF_Update(ekf, z);
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fc32 	bl	80009b0 <EKF_Update>

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <generate_white_noise>:


#include "pendulum.h"

/* Generate White Noise */
float generate_white_noise(float NOISE_AMPLITUDE ) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Simple uniform white noise in range [-NOISE_AMPLITUDE, NOISE_AMPLITUDE]
    return ((float)rand() / RAND_MAX - 0.5f) * 2.0f * NOISE_AMPLITUDE;
 800115e:	f003 f901 	bl	8004364 <rand>
 8001162:	ee07 0a90 	vmov	s15, r0
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001190 <generate_white_noise+0x3c>
 800116e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001172:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800117a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	4f000000 	.word	0x4f000000

08001194 <update_pendulum>:

/*Update Pendulum Dynamics */
void update_pendulum(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
	float  process_noise = 0.02f;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <update_pendulum+0x80>)
 800119c:	60fb      	str	r3, [r7, #12]
    float noise = generate_white_noise(process_noise);
 800119e:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a2:	f7ff ffd7 	bl	8001154 <generate_white_noise>
 80011a6:	ed87 0a02 	vstr	s0, [r7, #8]
    /* θ̈ = - (g / L) * sin(θ) + noise */
    float theta_ddot = - (G / L) * sinf(thetap) + noise;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <update_pendulum+0x84>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f004 f8ec 	bl	8005390 <sinf>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800121c <update_pendulum+0x88>
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Euler integration */
    theta_dotp += theta_ddot*DT ;
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001220 <update_pendulum+0x8c>
 80011d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <update_pendulum+0x90>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <update_pendulum+0x90>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
    thetap += theta_dotp*DT ;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <update_pendulum+0x90>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001220 <update_pendulum+0x8c>
 80011f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <update_pendulum+0x84>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <update_pendulum+0x84>)
 8001206:	edc3 7a00 	vstr	s15, [r3]
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	3ca3d70a 	.word	0x3ca3d70a
 8001218:	24000000 	.word	0x24000000
 800121c:	c2443334 	.word	0xc2443334
 8001220:	3c23d70a 	.word	0x3c23d70a
 8001224:	240000ec 	.word	0x240000ec

08001228 <pendulum_f>:

// EKF handle
EKF_HandleTypeDef* ekf;

/* Pendulum nonlinear state transition function: x_k+1 = f(x_k, u, dt) */
void pendulum_f( arm_matrix_instance_f32* x,  arm_matrix_instance_f32* u, float dt, arm_matrix_instance_f32* x_pred) {
 8001228:	b580      	push	{r7, lr}
 800122a:	ed2d 8b02 	vpush	{d8}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
 800123a:	603a      	str	r2, [r7, #0]
    const float dt_local = dt;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float m = 1.0f;
 8001240:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28

    float theta = x->pData[0];
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    float theta_dot = x->pData[1];
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	623b      	str	r3, [r7, #32]
    float torque = u->pData[0];
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61fb      	str	r3, [r7, #28]

    // Euler integration for state transition
    float theta_new = theta + theta_dot * dt_local;
 800125e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001262:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	edc7 7a06 	vstr	s15, [r7, #24]
    float theta_dot_new = theta_dot + (torque / (m * L * L) - (G / L) * sinf(theta)) * dt_local;
 8001276:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800127a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80012dc <pendulum_f+0xb4>
 800127e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001282:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80012dc <pendulum_f+0xb4>
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	ed97 7a07 	vldr	s14, [r7, #28]
 800128e:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8001292:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001296:	f004 f87b 	bl	8005390 <sinf>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80012e0 <pendulum_f+0xb8>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	ee38 7a67 	vsub.f32	s14, s16, s15
 80012aa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	edc7 7a05 	vstr	s15, [r7, #20]

    x_pred->pData[0] = theta_new;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	601a      	str	r2, [r3, #0]
    x_pred->pData[1] = theta_dot_new;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	@ 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	ecbd 8b02 	vpop	{d8}
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	3e4ccccd 	.word	0x3e4ccccd
 80012e0:	42443334 	.word	0x42443334

080012e4 <pendulum_F_jacobian>:

void pendulum_F_jacobian( arm_matrix_instance_f32* x,  arm_matrix_instance_f32* u, float dt, arm_matrix_instance_f32* F) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80012f2:	603a      	str	r2, [r7, #0]


    float theta = x->pData[0];
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]

    // Zero all elements first
    for (uint16_t i = 0; i < F->numRows * F->numCols; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	82fb      	strh	r3, [r7, #22]
 8001300:	e00a      	b.n	8001318 <pendulum_F_jacobian+0x34>
        F->pData[i] = 0.0f;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	8afb      	ldrh	r3, [r7, #22]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < F->numRows * F->numCols; i++) {
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	3301      	adds	r3, #1
 8001316:	82fb      	strh	r3, [r7, #22]
 8001318:	8afa      	ldrh	r2, [r7, #22]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	885b      	ldrh	r3, [r3, #2]
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	429a      	cmp	r2, r3
 800132a:	dbea      	blt.n	8001302 <pendulum_F_jacobian+0x1e>
    }

    F->pData[0] = 1.0f;          // ∂f1/∂θ
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001334:	601a      	str	r2, [r3, #0]
    F->pData[1] = dt;            // ∂f1/∂θ_dot
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	3304      	adds	r3, #4
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
    F->pData[2] = - (G / L) * cosf(theta) * dt; // ∂f2/∂θ
 8001340:	ed97 0a04 	vldr	s0, [r7, #16]
 8001344:	f004 f8e8 	bl	8005518 <cosf>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800137c <pendulum_F_jacobian+0x98>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	3308      	adds	r3, #8
 800135a:	edd7 7a01 	vldr	s15, [r7, #4]
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	edc3 7a00 	vstr	s15, [r3]
    F->pData[3] = 1.0f;          // ∂f2/∂θ_dot
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	330c      	adds	r3, #12
 800136c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	c2443334 	.word	0xc2443334

08001380 <pendulum_h>:

void pendulum_h( arm_matrix_instance_f32* x, arm_matrix_instance_f32* z_pred) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    // Measurement is angle only
    z_pred->pData[0] = x->pData[0];
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <pendulum_H_jacobian>:

void pendulum_H_jacobian( arm_matrix_instance_f32* x,  arm_matrix_instance_f32* u, float dt, arm_matrix_instance_f32* H) {
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80013b0:	603a      	str	r2, [r7, #0]
    H->pData[0] = 1.0f;  // ∂h/∂θ
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013ba:	601a      	str	r2, [r3, #0]
    H->pData[1] = 0.0f;  // ∂h/∂θ_dot
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	3304      	adds	r3, #4
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b093      	sub	sp, #76	@ 0x4c
 80013d8:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013da:	f000 fa13 	bl	8001804 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fc57 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f873 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 f92f 	bl	8001648 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013ea:	f000 f8df 	bl	80015ac <MX_TIM2_Init>




  // Covariances
  float P_f32[4] = {
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <main+0xa8>)
 80013f0:	f107 0410 	add.w	r4, r7, #16
 80013f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  0.00000001f,  0.0f,
		  0.0f, 0.00000001f,
  };
      float Q_f32[4] = {
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <main+0xac>)
 800140e:	60fb      	str	r3, [r7, #12]
          0, 0,
		  0, 0.002,
      };  // Process noise covariance
  R_buffer[0] = 0.001f; // Measurement noise covariance
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <main+0xb0>)
 8001412:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <main+0xb4>)
 8001414:	601a      	str	r2, [r3, #0]

  EKF_Init(ekf,
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <main+0xb8>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <main+0xbc>)
 800141c:	8819      	ldrh	r1, [r3, #0]
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <main+0xc0>)
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <main+0xc4>)
 8001424:	9309      	str	r3, [sp, #36]	@ 0x24
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <main+0xc8>)
 8001428:	9308      	str	r3, [sp, #32]
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <main+0xcc>)
 800142c:	9307      	str	r3, [sp, #28]
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <main+0xd0>)
 8001430:	9306      	str	r3, [sp, #24]
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <main+0xd4>)
 8001434:	9305      	str	r3, [sp, #20]
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <main+0xd8>)
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <main+0xdc>)
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <main+0xb0>)
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	463b      	mov	r3, r7
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <main+0xe0>)
 800144e:	f7ff f96b 	bl	8000728 <EKF_Init>
           K_buffer,
           pendulum_f,
           pendulum_h,
           pendulum_F_jacobian,
           pendulum_H_jacobian);
  arm_mat_init_f32(&u, 1, 1, u_data);
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <main+0xe4>)
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	4818      	ldr	r0, [pc, #96]	@ (80014bc <main+0xe8>)
 800145a:	f002 ff23 	bl	80042a4 <arm_mat_init_f32>
  arm_mat_init_f32(&z, 1, 1, z_data);
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <main+0xec>)
 8001460:	2201      	movs	r2, #1
 8001462:	2101      	movs	r1, #1
 8001464:	4817      	ldr	r0, [pc, #92]	@ (80014c4 <main+0xf0>)
 8001466:	f002 ff1d 	bl	80042a4 <arm_mat_init_f32>
  HAL_Delay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800146e:	f000 fca1 	bl	8001db4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 8001472:	4815      	ldr	r0, [pc, #84]	@ (80014c8 <main+0xf4>)
 8001474:	f001 ffa8 	bl	80033c8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <main+0xa4>
 800147c:	080056b0 	.word	0x080056b0
 8001480:	3b03126f 	.word	0x3b03126f
 8001484:	240000fc 	.word	0x240000fc
 8001488:	3a83126f 	.word	0x3a83126f
 800148c:	2400012c 	.word	0x2400012c
 8001490:	2400000e 	.word	0x2400000e
 8001494:	2400000c 	.word	0x2400000c
 8001498:	080013a3 	.word	0x080013a3
 800149c:	080012e5 	.word	0x080012e5
 80014a0:	08001381 	.word	0x08001381
 80014a4:	08001229 	.word	0x08001229
 80014a8:	24000118 	.word	0x24000118
 80014ac:	24000110 	.word	0x24000110
 80014b0:	24000100 	.word	0x24000100
 80014b4:	24000004 	.word	0x24000004
 80014b8:	240000f0 	.word	0x240000f0
 80014bc:	240000f4 	.word	0x240000f4
 80014c0:	24000120 	.word	0x24000120
 80014c4:	24000124 	.word	0x24000124
 80014c8:	240000a0 	.word	0x240000a0

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09c      	sub	sp, #112	@ 0x70
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	224c      	movs	r2, #76	@ 0x4c
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 f885 	bl	80045ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2220      	movs	r2, #32
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f87f 	bl	80045ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f000 ffcf 	bl	8002490 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <SystemClock_Config+0xdc>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014fe:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <SystemClock_Config+0xdc>)
 8001500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <SystemClock_Config+0xdc>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001512:	bf00      	nop
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <SystemClock_Config+0xdc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001520:	d1f8      	bne.n	8001514 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001522:	2302      	movs	r3, #2
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001526:	2301      	movs	r3, #1
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800152a:	2340      	movs	r3, #64	@ 0x40
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001532:	2300      	movs	r3, #0
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001536:	2304      	movs	r3, #4
 8001538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800153a:	230c      	movs	r3, #12
 800153c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001542:	2304      	movs	r3, #4
 8001544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800154a:	230c      	movs	r3, #12
 800154c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800154e:	2300      	movs	r3, #0
 8001550:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ffd2 	bl	8002504 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001566:	f000 f979 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	233f      	movs	r3, #63	@ 0x3f
 800156c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001576:	2308      	movs	r3, #8
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800157a:	2340      	movs	r3, #64	@ 0x40
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800157e:	2340      	movs	r3, #64	@ 0x40
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2101      	movs	r1, #1
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fb91 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800159c:	f000 f95e 	bl	800185c <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3770      	adds	r7, #112	@ 0x70
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024800 	.word	0x58024800

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 959;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015d4:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f4:	4813      	ldr	r0, [pc, #76]	@ (8001644 <MX_TIM2_Init+0x98>)
 80015f6:	f001 fe8f 	bl	8003318 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001600:	f000 f92c 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_TIM2_Init+0x98>)
 8001612:	f002 f867 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800161c:	f000 f91e 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_TIM2_Init+0x98>)
 800162e:	f002 fac3 	bl	8003bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001638:	f000 f910 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	240000a0 	.word	0x240000a0

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b4a      	ldr	r3, [pc, #296]	@ (8001788 <MX_GPIO_Init+0x140>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	4a48      	ldr	r2, [pc, #288]	@ (8001788 <MX_GPIO_Init+0x140>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166e:	4b46      	ldr	r3, [pc, #280]	@ (8001788 <MX_GPIO_Init+0x140>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b42      	ldr	r3, [pc, #264]	@ (8001788 <MX_GPIO_Init+0x140>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	4a41      	ldr	r2, [pc, #260]	@ (8001788 <MX_GPIO_Init+0x140>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800168c:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <MX_GPIO_Init+0x140>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <MX_GPIO_Init+0x140>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a0:	4a39      	ldr	r2, [pc, #228]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <MX_GPIO_Init+0x140>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80016fa:	4824      	ldr	r0, [pc, #144]	@ (800178c <MX_GPIO_Init+0x144>)
 80016fc:	f000 feae 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2102      	movs	r1, #2
 8001704:	4822      	ldr	r0, [pc, #136]	@ (8001790 <MX_GPIO_Init+0x148>)
 8001706:	f000 fea9 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	481d      	ldr	r0, [pc, #116]	@ (8001794 <MX_GPIO_Init+0x14c>)
 8001720:	f000 fcf4 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001724:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4813      	ldr	r0, [pc, #76]	@ (800178c <MX_GPIO_Init+0x144>)
 800173e:	f000 fce5 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001754:	2307      	movs	r3, #7
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480e      	ldr	r0, [pc, #56]	@ (8001798 <MX_GPIO_Init+0x150>)
 8001760:	f000 fcd4 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001764:	2302      	movs	r3, #2
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_GPIO_Init+0x148>)
 800177c:	f000 fcc6 	bl	800210c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	58020400 	.word	0x58020400
 8001790:	58021000 	.word	0x58021000
 8001794:	58020800 	.word	0x58020800
 8001798:	58020c00 	.word	0x58020c00

0800179c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

    	float dt = 0.01;
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017a6:	60fb      	str	r3, [r7, #12]
    	float measurement_noise = 0.1;
 80017a8:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017aa:	60bb      	str	r3, [r7, #8]
        // Advance the pendulum state with noise
        update_pendulum();
 80017ac:	f7ff fcf2 	bl	8001194 <update_pendulum>

        z_data[0] = thetap + generate_white_noise(measurement_noise);
 80017b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b4:	f7ff fcce 	bl	8001154 <generate_white_noise>
 80017b8:	eeb0 7a40 	vmov.f32	s14, s0
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]

        // EKF predict and update
        EKF_Step(ekf, &u, &z, dt);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80017d4:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017d6:	490a      	ldr	r1, [pc, #40]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fca5 	bl	8001128 <EKF_Step>

}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	3c23d70a 	.word	0x3c23d70a
 80017ec:	3dcccccd 	.word	0x3dcccccd
 80017f0:	24000000 	.word	0x24000000
 80017f4:	24000120 	.word	0x24000120
 80017f8:	2400012c 	.word	0x2400012c
 80017fc:	24000124 	.word	0x24000124
 8001800:	240000f4 	.word	0x240000f4

08001804 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001816:	f000 fc01 	bl	800201c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800181a:	2301      	movs	r3, #1
 800181c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800181e:	2300      	movs	r3, #0
 8001820:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001826:	231f      	movs	r3, #31
 8001828:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800182a:	2387      	movs	r3, #135	@ 0x87
 800182c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800182e:	2300      	movs	r3, #0
 8001830:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001832:	2300      	movs	r3, #0
 8001834:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001836:	2301      	movs	r3, #1
 8001838:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800183a:	2301      	movs	r3, #1
 800183c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001846:	463b      	mov	r3, r7
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fc1f 	bl	800208c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800184e:	2004      	movs	r0, #4
 8001850:	f000 fbfc 	bl	800204c <HAL_MPU_Enable>

}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_MspInit+0x30>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001874:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_MspInit+0x30>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_MspInit+0x30>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	58024400 	.word	0x58024400

0800189c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ac:	d116      	bne.n	80018dc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_TIM_Base_MspInit+0x48>)
 80018b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <HAL_TIM_Base_MspInit+0x48>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_TIM_Base_MspInit+0x48>)
 80018c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	201c      	movs	r0, #28
 80018d2:	f000 fb6e 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d6:	201c      	movs	r0, #28
 80018d8:	f000 fb85 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58024400 	.word	0x58024400

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 fa19 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <TIM2_IRQHandler+0x10>)
 800194e:	f001 fdc1 	bl	80034d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	240000a0 	.word	0x240000a0

0800195c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_kill>:

int _kill(int pid, int sig)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001976:	f002 fe87 	bl	8004688 <__errno>
 800197a:	4603      	mov	r3, r0
 800197c:	2216      	movs	r2, #22
 800197e:	601a      	str	r2, [r3, #0]
  return -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_exit>:

void _exit (int status)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ffe7 	bl	800196c <_kill>
  while (1) {}    /* Make sure we hang here */
 800199e:	bf00      	nop
 80019a0:	e7fd      	b.n	800199e <_exit+0x12>

080019a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e00a      	b.n	80019ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b4:	f3af 8000 	nop.w
 80019b8:	4601      	mov	r1, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbf0      	blt.n	80019b4 <_read+0x12>
  }

  return len;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e009      	b.n	8001a02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dbf1      	blt.n	80019ee <_write+0x12>
  }
  return len;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_close>:

int _close(int file)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_isatty>:

int _isatty(int file)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <_sbrk+0x5c>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <_sbrk+0x60>)
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <_sbrk+0x64>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <_sbrk+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d207      	bcs.n	8001abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aac:	f002 fdec 	bl	8004688 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e009      	b.n	8001ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <_sbrk+0x64>)
 8001acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24050000 	.word	0x24050000
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	24000130 	.word	0x24000130
 8001ae4:	24000288 	.word	0x24000288

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aec:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <SystemInit+0x100>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af2:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <SystemInit+0x100>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <SystemInit+0x104>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d807      	bhi.n	8001b18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b08:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <SystemInit+0x104>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 030f 	bic.w	r3, r3, #15
 8001b10:	4a36      	ldr	r2, [pc, #216]	@ (8001bec <SystemInit+0x104>)
 8001b12:	f043 0307 	orr.w	r3, r3, #7
 8001b16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b18:	4b35      	ldr	r3, [pc, #212]	@ (8001bf0 <SystemInit+0x108>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a34      	ldr	r2, [pc, #208]	@ (8001bf0 <SystemInit+0x108>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <SystemInit+0x108>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b2a:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <SystemInit+0x108>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4930      	ldr	r1, [pc, #192]	@ (8001bf0 <SystemInit+0x108>)
 8001b30:	4b30      	ldr	r3, [pc, #192]	@ (8001bf4 <SystemInit+0x10c>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b36:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <SystemInit+0x104>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <SystemInit+0x104>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 030f 	bic.w	r3, r3, #15
 8001b4a:	4a28      	ldr	r2, [pc, #160]	@ (8001bec <SystemInit+0x104>)
 8001b4c:	f043 0307 	orr.w	r3, r3, #7
 8001b50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <SystemInit+0x108>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <SystemInit+0x108>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <SystemInit+0x108>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <SystemInit+0x108>)
 8001b66:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <SystemInit+0x110>)
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <SystemInit+0x108>)
 8001b6c:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <SystemInit+0x114>)
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <SystemInit+0x108>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	@ (8001c00 <SystemInit+0x118>)
 8001b74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <SystemInit+0x108>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <SystemInit+0x108>)
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <SystemInit+0x118>)
 8001b80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <SystemInit+0x108>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <SystemInit+0x108>)
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <SystemInit+0x118>)
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <SystemInit+0x108>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <SystemInit+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a15      	ldr	r2, [pc, #84]	@ (8001bf0 <SystemInit+0x108>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <SystemInit+0x108>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <SystemInit+0x108>)
 8001ba8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d113      	bne.n	8001bdc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <SystemInit+0x108>)
 8001bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bba:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <SystemInit+0x108>)
 8001bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <SystemInit+0x11c>)
 8001bc6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <SystemInit+0x108>)
 8001bce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bd2:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <SystemInit+0x108>)
 8001bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bd8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	52002000 	.word	0x52002000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bf8:	02020200 	.word	0x02020200
 8001bfc:	01ff0000 	.word	0x01ff0000
 8001c00:	01010280 	.word	0x01010280
 8001c04:	52004000 	.word	0x52004000

08001c08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <ExitRun0Mode+0x2c>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <ExitRun0Mode+0x2c>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c18:	bf00      	nop
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <ExitRun0Mode+0x2c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f9      	beq.n	8001c1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	58024800 	.word	0x58024800

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001c74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001c3c:	f7ff ffe4 	bl	8001c08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c40:	f7ff ff52 	bl	8001ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f002 fd13 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7ff fbb1 	bl	80013d4 <main>
  bx  lr
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c7c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001c80:	08005900 	.word	0x08005900
  ldr r2, =_sbss
 8001c84:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001c88:	24000284 	.word	0x24000284

08001c8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC3_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f000 f980 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c9c:	f001 f9c2 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_Init+0x68>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	4913      	ldr	r1, [pc, #76]	@ (8001cfc <HAL_Init+0x6c>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_Init+0x68>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cfc <HAL_Init+0x6c>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <HAL_Init+0x70>)
 8001cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_Init+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f814 	bl	8001d08 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e002      	b.n	8001cf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cea:	f7ff fdbd 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	080056c0 	.word	0x080056c0
 8001d00:	24000014 	.word	0x24000014
 8001d04:	24000010 	.word	0x24000010

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_InitTick+0x60>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e021      	b.n	8001d60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_InitTick+0x64>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_InitTick+0x60>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f965 	bl	8002002 <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 f92f 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <HAL_InitTick+0x68>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2400001c 	.word	0x2400001c
 8001d6c:	24000010 	.word	0x24000010
 8001d70:	24000018 	.word	0x24000018

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_IncTick+0x24>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <HAL_IncTick+0x24>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2400001c 	.word	0x2400001c
 8001d98:	24000134 	.word	0x24000134

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	24000134 	.word	0x24000134

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_Delay+0x44>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffde 	bl	8001d9c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2400001c 	.word	0x2400001c

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x40>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x40>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00
 8001e40:	05fa0000 	.word	0x05fa0000

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	@ (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	@ (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	@ (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	@ 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff8e 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff29 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff40 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff90 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5f 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff33 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa4 	bl	8001f58 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002020:	f3bf 8f5f 	dmb	sy
}
 8002024:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <HAL_MPU_Disable+0x28>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <HAL_MPU_Disable+0x28>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002030:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_MPU_Disable+0x2c>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	e000ed90 	.word	0xe000ed90

0800204c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002054:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_MPU_Enable+0x38>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_MPU_Enable+0x3c>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <HAL_MPU_Enable+0x3c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800206a:	f3bf 8f4f 	dsb	sy
}
 800206e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002070:	f3bf 8f6f 	isb	sy
}
 8002074:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed90 	.word	0xe000ed90
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	785a      	ldrb	r2, [r3, #1]
 8002098:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <HAL_MPU_ConfigRegion+0x7c>)
 800209a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800209c:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <HAL_MPU_ConfigRegion+0x7c>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_MPU_ConfigRegion+0x7c>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <HAL_MPU_ConfigRegion+0x7c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7b1b      	ldrb	r3, [r3, #12]
 80020b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7adb      	ldrb	r3, [r3, #11]
 80020ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7a9b      	ldrb	r3, [r3, #10]
 80020c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7b5b      	ldrb	r3, [r3, #13]
 80020ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7b9b      	ldrb	r3, [r3, #14]
 80020d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7bdb      	ldrb	r3, [r3, #15]
 80020da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7a5b      	ldrb	r3, [r3, #9]
 80020e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7a1b      	ldrb	r3, [r3, #8]
 80020ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020f8:	6113      	str	r3, [r2, #16]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed90 	.word	0xe000ed90

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800211a:	4b86      	ldr	r3, [pc, #536]	@ (8002334 <HAL_GPIO_Init+0x228>)
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800211e:	e18c      	b.n	800243a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 817e 	beq.w	8002434 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	69b9      	ldr	r1, [r7, #24]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80d8 	beq.w	8002434 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <HAL_GPIO_Init+0x22c>)
 8002286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800228a:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <HAL_GPIO_Init+0x22c>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HAL_GPIO_Init+0x22c>)
 8002296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_GPIO_Init+0x230>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_GPIO_Init+0x234>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d04a      	beq.n	8002364 <HAL_GPIO_Init+0x258>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <HAL_GPIO_Init+0x238>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02b      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_GPIO_Init+0x23c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_GPIO_Init+0x240>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_GPIO_Init+0x244>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a18      	ldr	r2, [pc, #96]	@ (8002354 <HAL_GPIO_Init+0x248>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_GPIO_Init+0x24c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a16      	ldr	r2, [pc, #88]	@ (800235c <HAL_GPIO_Init+0x250>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x20a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <HAL_GPIO_Init+0x254>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x206>
 800230e:	2309      	movs	r3, #9
 8002310:	e029      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 8002312:	230a      	movs	r3, #10
 8002314:	e027      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 8002316:	2307      	movs	r3, #7
 8002318:	e025      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 800231a:	2306      	movs	r3, #6
 800231c:	e023      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 800231e:	2305      	movs	r3, #5
 8002320:	e021      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 8002322:	2304      	movs	r3, #4
 8002324:	e01f      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 8002326:	2303      	movs	r3, #3
 8002328:	e01d      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 800232a:	2302      	movs	r3, #2
 800232c:	e01b      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 800232e:	2301      	movs	r3, #1
 8002330:	e019      	b.n	8002366 <HAL_GPIO_Init+0x25a>
 8002332:	bf00      	nop
 8002334:	58000080 	.word	0x58000080
 8002338:	58024400 	.word	0x58024400
 800233c:	58000400 	.word	0x58000400
 8002340:	58020000 	.word	0x58020000
 8002344:	58020400 	.word	0x58020400
 8002348:	58020800 	.word	0x58020800
 800234c:	58020c00 	.word	0x58020c00
 8002350:	58021000 	.word	0x58021000
 8002354:	58021400 	.word	0x58021400
 8002358:	58021800 	.word	0x58021800
 800235c:	58021c00 	.word	0x58021c00
 8002360:	58022400 	.word	0x58022400
 8002364:	2300      	movs	r3, #0
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f002 0203 	and.w	r2, r2, #3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4093      	lsls	r3, r2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002376:	4938      	ldr	r1, [pc, #224]	@ (8002458 <HAL_GPIO_Init+0x34c>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f ae6b 	bne.w	8002120 <HAL_GPIO_Init+0x14>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3724      	adds	r7, #36	@ 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	58000400 	.word	0x58000400

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002478:	e003      	b.n	8002482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_PWREx_ConfigSupply+0x70>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00a      	beq.n	80024ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024a4:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <HAL_PWREx_ConfigSupply+0x70>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e01f      	b.n	80024f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e01d      	b.n	80024f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_PWREx_ConfigSupply+0x70>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	490f      	ldr	r1, [pc, #60]	@ (8002500 <HAL_PWREx_ConfigSupply+0x70>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ca:	f7ff fc67 	bl	8001d9c <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d0:	e009      	b.n	80024e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024d2:	f7ff fc63 	bl	8001d9c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024e0:	d901      	bls.n	80024e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e007      	b.n	80024f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_PWREx_ConfigSupply+0x70>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f2:	d1ee      	bne.n	80024d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	58024800 	.word	0x58024800

08002504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	@ 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e3c8      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002524:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800252e:	4b86      	ldr	r3, [pc, #536]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002536:	2b10      	cmp	r3, #16
 8002538:	d007      	beq.n	800254a <HAL_RCC_OscConfig+0x46>
 800253a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253c:	2b18      	cmp	r3, #24
 800253e:	d110      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b7f      	ldr	r3, [pc, #508]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06c      	beq.n	8002630 <HAL_RCC_OscConfig+0x12c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d168      	bne.n	8002630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e3a2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x76>
 800256c:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a75      	ldr	r2, [pc, #468]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e02e      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b71      	ldr	r3, [pc, #452]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a70      	ldr	r2, [pc, #448]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6e      	ldr	r3, [pc, #440]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6d      	ldr	r2, [pc, #436]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0xbc>
 80025a6:	4b68      	ldr	r3, [pc, #416]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a67      	ldr	r2, [pc, #412]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b65      	ldr	r3, [pc, #404]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a64      	ldr	r2, [pc, #400]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fbdc 	bl	8001d9c <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fbd8 	bl	8001d9c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e356      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fa:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe4>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fbc8 	bl	8001d9c <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fbc4 	bl	8001d9c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e342      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x10c>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808c 	beq.w	8002758 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002640:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002648:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800264a:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_RCC_OscConfig+0x162>
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2b18      	cmp	r3, #24
 800265a:	d137      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c8>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d132      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x17a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e314      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0219 	bic.w	r2, r3, #25
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	492f      	ldr	r1, [pc, #188]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff fb84 	bl	8001d9c <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7ff fb80 	bl	8001d9c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e2fe      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	4920      	ldr	r1, [pc, #128]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	e045      	b.n	8002758 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d026      	beq.n	8002722 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 0219 	bic.w	r2, r3, #25
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4919      	ldr	r1, [pc, #100]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff fb59 	bl	8001d9c <HAL_GetTick>
 80026ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff fb55 	bl	8001d9c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e2d3      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	490b      	ldr	r1, [pc, #44]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	e01a      	b.n	8002758 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7ff fb35 	bl	8001d9c <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7ff fb31 	bl	8001d9c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d903      	bls.n	800274c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e2af      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
 8002748:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800274c:	4b96      	ldr	r3, [pc, #600]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d06a      	beq.n	800283a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002764:	4b90      	ldr	r3, [pc, #576]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800276e:	4b8e      	ldr	r3, [pc, #568]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d007      	beq.n	800278a <HAL_RCC_OscConfig+0x286>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b18      	cmp	r3, #24
 800277e:	d11b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2b4>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278a:	4b87      	ldr	r3, [pc, #540]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x29e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e282      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027a2:	4b81      	ldr	r3, [pc, #516]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	497d      	ldr	r1, [pc, #500]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b6:	e040      	b.n	800283a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027c0:	4b79      	ldr	r3, [pc, #484]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a78      	ldr	r2, [pc, #480]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff fae6 	bl	8001d9c <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027d4:	f7ff fae2 	bl	8001d9c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e260      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027e6:	4b70      	ldr	r3, [pc, #448]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f2:	4b6d      	ldr	r3, [pc, #436]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	4969      	ldr	r1, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
 8002806:	e018      	b.n	800283a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002808:	4b67      	ldr	r3, [pc, #412]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a66      	ldr	r2, [pc, #408]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800280e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fac2 	bl	8001d9c <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800281c:	f7ff fabe 	bl	8001d9c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e23c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800282e:	4b5e      	ldr	r3, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b56      	ldr	r3, [pc, #344]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002852:	4a55      	ldr	r2, [pc, #340]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7ff fa9f 	bl	8001d9c <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7ff fa9b 	bl	8001d9c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e219      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002874:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x35e>
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	4b49      	ldr	r3, [pc, #292]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002886:	4a48      	ldr	r2, [pc, #288]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff fa85 	bl	8001d9c <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7ff fa81 	bl	8001d9c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1ff      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a8:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d036      	beq.n	800292e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d019      	beq.n	80028fc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a36      	ldr	r2, [pc, #216]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80028ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d4:	f7ff fa62 	bl	8001d9c <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028dc:	f7ff fa5e 	bl	8001d9c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1dc      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ee:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x3d8>
 80028fa:	e018      	b.n	800292e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fc:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002908:	f7ff fa48 	bl	8001d9c <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002910:	f7ff fa44 	bl	8001d9c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1c2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8086 	beq.w	8002a48 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4a8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_RCC_OscConfig+0x4a8>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002948:	f7ff fa28 	bl	8001d9c <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7ff fa24 	bl	8001d9c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1a2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_OscConfig+0x4a8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x480>
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a0b      	ldr	r2, [pc, #44]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	e032      	b.n	80029ea <HAL_RCC_OscConfig+0x4e6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4ac>
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a05      	ldr	r2, [pc, #20]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a02      	ldr	r2, [pc, #8]	@ (80029a8 <HAL_RCC_OscConfig+0x4a4>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	e021      	b.n	80029ea <HAL_RCC_OscConfig+0x4e6>
 80029a6:	bf00      	nop
 80029a8:	58024400 	.word	0x58024400
 80029ac:	58024800 	.word	0x58024800
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4ce>
 80029b8:	4b83      	ldr	r3, [pc, #524]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a82      	ldr	r2, [pc, #520]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c4:	4b80      	ldr	r3, [pc, #512]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x4e6>
 80029d2:	4b7d      	ldr	r3, [pc, #500]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	4a79      	ldr	r2, [pc, #484]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7ff f9d3 	bl	8001d9c <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7ff f9cf 	bl	8001d9c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e14b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a10:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x4f6>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7ff f9bd 	bl	8001d9c <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7ff f9b9 	bl	8001d9c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e135      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a3c:	4b62      	ldr	r3, [pc, #392]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 812a 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a52:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a5a:	2b18      	cmp	r3, #24
 8002a5c:	f000 80ba 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	f040 8095 	bne.w	8002b94 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b57      	ldr	r3, [pc, #348]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a56      	ldr	r2, [pc, #344]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7ff f991 	bl	8001d9c <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7ff f98d 	bl	8001d9c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e10b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a90:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_RCC_OscConfig+0x6c8>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	4945      	ldr	r1, [pc, #276]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ae6:	4938      	ldr	r1, [pc, #224]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002aec:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	4a35      	ldr	r2, [pc, #212]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af8:	4b33      	ldr	r3, [pc, #204]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afc:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_OscConfig+0x6cc>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b04:	00d2      	lsls	r2, r2, #3
 8002b06:	4930      	ldr	r1, [pc, #192]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	f023 020c 	bic.w	r2, r3, #12
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	492b      	ldr	r1, [pc, #172]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	f023 0202 	bic.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4927      	ldr	r1, [pc, #156]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a24      	ldr	r2, [pc, #144]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b3c:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b48:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f916 	bl	8001d9c <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff f912 	bl	8001d9c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e090      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x670>
 8002b92:	e088      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f8fc 	bl	8001d9c <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7ff f8f8 	bl	8001d9c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e076      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bba:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a4>
 8002bc6:	e06e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a2>
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	fffffc0c 	.word	0xfffffc0c
 8002bd0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bd4:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bda:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d031      	beq.n	8002c4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d12a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d122      	bne.n	8002c4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0a5b      	lsrs	r3, r3, #9
 8002c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0e1b      	lsrs	r3, r3, #24
 8002c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c50:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d01f      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c66:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c72:	f7ff f893 	bl	8001d9c <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c78:	bf00      	nop
 8002c7a:	f7ff f88f 	bl	8001d9c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d0f9      	beq.n	8002c7a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c92:	00d2      	lsls	r2, r2, #3
 8002c94:	4906      	ldr	r1, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_RCC_OscConfig+0x7ac>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3730      	adds	r7, #48	@ 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	ffff0007 	.word	0xffff0007

08002cb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e19c      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b87      	ldr	r3, [pc, #540]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4985      	ldr	r1, [pc, #532]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b83      	ldr	r3, [pc, #524]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e184      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d18:	4b78      	ldr	r3, [pc, #480]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	4975      	ldr	r1, [pc, #468]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d908      	bls.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	496a      	ldr	r1, [pc, #424]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	4b64      	ldr	r3, [pc, #400]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	495e      	ldr	r1, [pc, #376]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4953      	ldr	r1, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d908      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f023 020f 	bic.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4947      	ldr	r1, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d055      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dee:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4940      	ldr	r1, [pc, #256]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0f6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ea      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0de      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe ff97 	bl	8001d9c <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e72:	f7fe ff93 	bl	8001d9c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0be      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1eb      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d208      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d214      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e086      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	4b3f      	ldr	r3, [pc, #252]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d208      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4939      	ldr	r1, [pc, #228]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	492e      	ldr	r1, [pc, #184]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d208      	bcs.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f78:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4922      	ldr	r1, [pc, #136]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb8:	f000 f834 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	4912      	ldr	r1, [pc, #72]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x360>)
 8002fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x364>)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_ClockConfig+0x368>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fe84 	bl	8001d08 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	080056c0 	.word	0x080056c0
 8003018:	24000014 	.word	0x24000014
 800301c:	24000010 	.word	0x24000010
 8003020:	24000018 	.word	0x24000018

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302a:	4bb3      	ldr	r3, [pc, #716]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003032:	2b18      	cmp	r3, #24
 8003034:	f200 8155 	bhi.w	80032e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003038:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080032e3 	.word	0x080032e3
 8003048:	080032e3 	.word	0x080032e3
 800304c:	080032e3 	.word	0x080032e3
 8003050:	080032e3 	.word	0x080032e3
 8003054:	080032e3 	.word	0x080032e3
 8003058:	080032e3 	.word	0x080032e3
 800305c:	080032e3 	.word	0x080032e3
 8003060:	080030cb 	.word	0x080030cb
 8003064:	080032e3 	.word	0x080032e3
 8003068:	080032e3 	.word	0x080032e3
 800306c:	080032e3 	.word	0x080032e3
 8003070:	080032e3 	.word	0x080032e3
 8003074:	080032e3 	.word	0x080032e3
 8003078:	080032e3 	.word	0x080032e3
 800307c:	080032e3 	.word	0x080032e3
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080032e3 	.word	0x080032e3
 8003088:	080032e3 	.word	0x080032e3
 800308c:	080032e3 	.word	0x080032e3
 8003090:	080032e3 	.word	0x080032e3
 8003094:	080032e3 	.word	0x080032e3
 8003098:	080032e3 	.word	0x080032e3
 800309c:	080032e3 	.word	0x080032e3
 80030a0:	080030d7 	.word	0x080030d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a4:	4b94      	ldr	r3, [pc, #592]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030b0:	4b91      	ldr	r3, [pc, #580]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030c2:	e111      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c4:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c6:	61bb      	str	r3, [r7, #24]
      break;
 80030c8:	e10e      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030cc:	61bb      	str	r3, [r7, #24]
      break;
 80030ce:	e10b      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e108      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d6:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030e0:	4b85      	ldr	r3, [pc, #532]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030ec:	4b82      	ldr	r3, [pc, #520]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030f6:	4b80      	ldr	r3, [pc, #512]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80e1 	beq.w	80032dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f000 8083 	beq.w	8003228 <HAL_RCC_GetSysClockFreq+0x204>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f200 80a1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x248>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x114>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d056      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003136:	e099      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02d      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003144:	4b6c      	ldr	r3, [pc, #432]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316e:	4b62      	ldr	r3, [pc, #392]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003182:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800319e:	e087      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e2:	e065      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003226:	e043      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003314 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800326a:	e021      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	0a5b      	lsrs	r3, r3, #9
 80032b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ba:	3301      	adds	r3, #1
 80032bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d4:	ee17 3a90 	vmov	r3, s15
 80032d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032da:	e005      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
      break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e4:	61bb      	str	r3, [r7, #24]
      break;
 80032e6:	bf00      	nop
  }

  return sysclockfreq;
 80032e8:	69bb      	ldr	r3, [r7, #24]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	@ 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	58024400 	.word	0x58024400
 80032fc:	03d09000 	.word	0x03d09000
 8003300:	003d0900 	.word	0x003d0900
 8003304:	007a1200 	.word	0x007a1200
 8003308:	46000000 	.word	0x46000000
 800330c:	4c742400 	.word	0x4c742400
 8003310:	4a742400 	.word	0x4a742400
 8003314:	4af42400 	.word	0x4af42400

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e049      	b.n	80033be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe faac 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 fae4 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d001      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e05e      	b.n	800349e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <HAL_TIM_Base_Start_IT+0xe4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02c      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800340a:	d027      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a27      	ldr	r2, [pc, #156]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a26      	ldr	r2, [pc, #152]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xec>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01d      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a24      	ldr	r2, [pc, #144]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xf0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d018      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a23      	ldr	r2, [pc, #140]	@ (80034bc <HAL_TIM_Base_Start_IT+0xf4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xf8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xfc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_TIM_Base_Start_IT+0x100>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x94>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_TIM_Base_Start_IT+0x104>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d115      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_TIM_Base_Start_IT+0x108>)
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b06      	cmp	r3, #6
 800346c:	d015      	beq.n	800349a <HAL_TIM_Base_Start_IT+0xd2>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003474:	d011      	beq.n	800349a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e008      	b.n	800349a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e000      	b.n	800349c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40010400 	.word	0x40010400
 80034c0:	40001800 	.word	0x40001800
 80034c4:	40014000 	.word	0x40014000
 80034c8:	4000e000 	.word	0x4000e000
 80034cc:	4000e400 	.word	0x4000e400
 80034d0:	00010007 	.word	0x00010007

080034d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0202 	mvn.w	r2, #2
 8003508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9e2 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9d4 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f9e5 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0204 	mvn.w	r2, #4
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9bc 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9ae 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9bf 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0208 	mvn.w	r2, #8
 80035a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2204      	movs	r2, #4
 80035a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f996 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f988 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f999 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0210 	mvn.w	r2, #16
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2208      	movs	r2, #8
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f970 	bl	80038e8 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f962 	bl	80038d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f973 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe f8ae 	bl	800179c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d104      	bne.n	8003654 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb4b 	bl	8003d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00c      	beq.n	8003692 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fb43 	bl	8003d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00c      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f92d 	bl	8003910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0220 	mvn.w	r2, #32
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fb0b 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0dc      	b.n	80038ba <HAL_TIM_ConfigClockSource+0x1d6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4b6a      	ldr	r3, [pc, #424]	@ (80038c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800371c:	4013      	ands	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a64      	ldr	r2, [pc, #400]	@ (80038c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f000 80a9 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 800373c:	4a62      	ldr	r2, [pc, #392]	@ (80038c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	f200 80ae 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003744:	4a61      	ldr	r2, [pc, #388]	@ (80038cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f000 80a1 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 800374c:	4a5f      	ldr	r2, [pc, #380]	@ (80038cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f200 80a6 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003754:	4a5e      	ldr	r2, [pc, #376]	@ (80038d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f000 8099 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 800375c:	4a5c      	ldr	r2, [pc, #368]	@ (80038d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f200 809e 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003764:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003768:	f000 8091 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 800376c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003770:	f200 8096 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003778:	f000 8089 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 800377c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003780:	f200 808e 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003788:	d03e      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0x124>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378e:	f200 8087 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003796:	f000 8086 	beq.w	80038a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379e:	d87f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037a0:	2b70      	cmp	r3, #112	@ 0x70
 80037a2:	d01a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xf6>
 80037a4:	2b70      	cmp	r3, #112	@ 0x70
 80037a6:	d87b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037a8:	2b60      	cmp	r3, #96	@ 0x60
 80037aa:	d050      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x16a>
 80037ac:	2b60      	cmp	r3, #96	@ 0x60
 80037ae:	d877      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037b0:	2b50      	cmp	r3, #80	@ 0x50
 80037b2:	d03c      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x14a>
 80037b4:	2b50      	cmp	r3, #80	@ 0x50
 80037b6:	d873      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d058      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x18a>
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d86f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037c0:	2b30      	cmp	r3, #48	@ 0x30
 80037c2:	d064      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 80037c4:	2b30      	cmp	r3, #48	@ 0x30
 80037c6:	d86b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d060      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d867      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d05a      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x1aa>
 80037d8:	e062      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ea:	f000 f9c5 	bl	8003b78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
      break;
 8003806:	e04f      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003818:	f000 f9ae 	bl	8003b78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e03c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	461a      	mov	r2, r3
 800383c:	f000 f91e 	bl	8003a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2150      	movs	r1, #80	@ 0x50
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f978 	bl	8003b3c <TIM_ITRx_SetConfig>
      break;
 800384c:	e02c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800385a:	461a      	mov	r2, r3
 800385c:	f000 f93d 	bl	8003ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2160      	movs	r1, #96	@ 0x60
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f968 	bl	8003b3c <TIM_ITRx_SetConfig>
      break;
 800386c:	e01c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f8fe 	bl	8003a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2140      	movs	r1, #64	@ 0x40
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f958 	bl	8003b3c <TIM_ITRx_SetConfig>
      break;
 800388c:	e00c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 f94f 	bl	8003b3c <TIM_ITRx_SetConfig>
      break;
 800389e:	e003      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e000      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80038a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	ffceff88 	.word	0xffceff88
 80038c8:	00100040 	.word	0x00100040
 80038cc:	00100030 	.word	0x00100030
 80038d0:	00100020 	.word	0x00100020

080038d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a47      	ldr	r2, [pc, #284]	@ (8003a54 <TIM_Base_SetConfig+0x130>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a44      	ldr	r2, [pc, #272]	@ (8003a58 <TIM_Base_SetConfig+0x134>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a43      	ldr	r2, [pc, #268]	@ (8003a5c <TIM_Base_SetConfig+0x138>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <TIM_Base_SetConfig+0x13c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a41      	ldr	r2, [pc, #260]	@ (8003a64 <TIM_Base_SetConfig+0x140>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a36      	ldr	r2, [pc, #216]	@ (8003a54 <TIM_Base_SetConfig+0x130>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d027      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d023      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a33      	ldr	r2, [pc, #204]	@ (8003a58 <TIM_Base_SetConfig+0x134>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <TIM_Base_SetConfig+0x138>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01b      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a31      	ldr	r2, [pc, #196]	@ (8003a60 <TIM_Base_SetConfig+0x13c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d017      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a30      	ldr	r2, [pc, #192]	@ (8003a64 <TIM_Base_SetConfig+0x140>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a68 <TIM_Base_SetConfig+0x144>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <TIM_Base_SetConfig+0x148>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a70 <TIM_Base_SetConfig+0x14c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <TIM_Base_SetConfig+0x150>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <TIM_Base_SetConfig+0x154>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a14      	ldr	r2, [pc, #80]	@ (8003a54 <TIM_Base_SetConfig+0x130>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0x102>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <TIM_Base_SetConfig+0x140>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0x102>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_Base_SetConfig+0x144>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0x102>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <TIM_Base_SetConfig+0x148>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0x102>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <TIM_Base_SetConfig+0x14c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d103      	bne.n	8003a2e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800
 8003a74:	4000e000 	.word	0x4000e000
 8003a78:	4000e400 	.word	0x4000e400

08003a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 030a 	bic.w	r3, r3, #10
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 0210 	bic.w	r2, r3, #16
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <TIM_ITRx_SetConfig+0x38>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f043 0307 	orr.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	609a      	str	r2, [r3, #8]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	ffcfff8f 	.word	0xffcfff8f

08003b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e077      	b.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a34      	ldr	r2, [pc, #208]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02c      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d027      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d01d      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10c      	bne.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40010400 	.word	0x40010400
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40001800 	.word	0x40001800
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	4000e000 	.word	0x4000e000
 8003cec:	4000e400 	.word	0x4000e400

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <arm_mat_trans_f32>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	f8b0 c000 	ldrh.w	ip, [r0]
 8003d34:	b083      	sub	sp, #12
 8003d36:	884a      	ldrh	r2, [r1, #2]
 8003d38:	6845      	ldr	r5, [r0, #4]
 8003d3a:	4562      	cmp	r2, ip
 8003d3c:	8843      	ldrh	r3, [r0, #2]
 8003d3e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003d42:	d15c      	bne.n	8003dfe <arm_mat_trans_f32+0xd2>
 8003d44:	f8b1 e000 	ldrh.w	lr, [r1]
 8003d48:	459e      	cmp	lr, r3
 8003d4a:	d158      	bne.n	8003dfe <arm_mat_trans_f32+0xd2>
 8003d4c:	f00e 0203 	and.w	r2, lr, #3
 8003d50:	ea4f 039e 	mov.w	r3, lr, lsr #2
 8003d54:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8003d58:	2700      	movs	r7, #0
 8003d5a:	1e51      	subs	r1, r2, #1
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	b289      	uxth	r1, r1
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3101      	adds	r1, #1
 8003d68:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8003d6c:	f103 0902 	add.w	r9, r3, #2
 8003d70:	3301      	adds	r3, #1
 8003d72:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8003d76:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003d7a:	fb03 fb0b 	mul.w	fp, r3, fp
 8003d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	eb0a 0187 	add.w	r1, sl, r7, lsl #2
 8003d88:	b3bb      	cbz	r3, 8003dfa <arm_mat_trans_f32+0xce>
 8003d8a:	f105 0310 	add.w	r3, r5, #16
 8003d8e:	eb05 0609 	add.w	r6, r5, r9
 8003d92:	4608      	mov	r0, r1
 8003d94:	ed53 7a04 	vldr	s15, [r3, #-16]
 8003d98:	1884      	adds	r4, r0, r2
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	edc0 7a00 	vstr	s15, [r0]
 8003da0:	18a0      	adds	r0, r4, r2
 8003da2:	ed53 7a07 	vldr	s15, [r3, #-28]	@ 0xffffffe4
 8003da6:	edc4 7a00 	vstr	s15, [r4]
 8003daa:	1884      	adds	r4, r0, r2
 8003dac:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8003db0:	edc0 7a00 	vstr	s15, [r0]
 8003db4:	18a0      	adds	r0, r4, r2
 8003db6:	ed53 7a05 	vldr	s15, [r3, #-20]	@ 0xffffffec
 8003dba:	42b3      	cmp	r3, r6
 8003dbc:	edc4 7a00 	vstr	s15, [r4]
 8003dc0:	d1e8      	bne.n	8003d94 <arm_mat_trans_f32+0x68>
 8003dc2:	eb05 0308 	add.w	r3, r5, r8
 8003dc6:	4459      	add	r1, fp
 8003dc8:	9800      	ldr	r0, [sp, #0]
 8003dca:	b180      	cbz	r0, 8003dee <arm_mat_trans_f32+0xc2>
 8003dcc:	eb03 050e 	add.w	r5, r3, lr
 8003dd0:	f853 0b04 	ldr.w	r0, [r3], #4
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	6008      	str	r0, [r1, #0]
 8003dd8:	4411      	add	r1, r2
 8003dda:	d1f9      	bne.n	8003dd0 <arm_mat_trans_f32+0xa4>
 8003ddc:	3701      	adds	r7, #1
 8003dde:	b2bf      	uxth	r7, r7
 8003de0:	4567      	cmp	r7, ip
 8003de2:	d1ce      	bne.n	8003d82 <arm_mat_trans_f32+0x56>
 8003de4:	2000      	movs	r0, #0
 8003de6:	b240      	sxtb	r0, r0
 8003de8:	b003      	add	sp, #12
 8003dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dee:	3701      	adds	r7, #1
 8003df0:	461d      	mov	r5, r3
 8003df2:	b2bf      	uxth	r7, r7
 8003df4:	4567      	cmp	r7, ip
 8003df6:	d1c4      	bne.n	8003d82 <arm_mat_trans_f32+0x56>
 8003df8:	e7f4      	b.n	8003de4 <arm_mat_trans_f32+0xb8>
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	e7e4      	b.n	8003dc8 <arm_mat_trans_f32+0x9c>
 8003dfe:	20fd      	movs	r0, #253	@ 0xfd
 8003e00:	b240      	sxtb	r0, r0
 8003e02:	b003      	add	sp, #12
 8003e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e08 <arm_mat_sub_f32>:
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	6803      	ldr	r3, [r0, #0]
 8003e0c:	6846      	ldr	r6, [r0, #4]
 8003e0e:	6855      	ldr	r5, [r2, #4]
 8003e10:	e891 0090 	ldmia.w	r1, {r4, r7}
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d14f      	bne.n	8003eb8 <arm_mat_sub_f32+0xb0>
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d14c      	bne.n	8003eb8 <arm_mat_sub_f32+0xb0>
 8003e1e:	8842      	ldrh	r2, [r0, #2]
 8003e20:	8803      	ldrh	r3, [r0, #0]
 8003e22:	fb03 f002 	mul.w	r0, r3, r2
 8003e26:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 8003e2a:	d033      	beq.n	8003e94 <arm_mat_sub_f32+0x8c>
 8003e2c:	f106 0110 	add.w	r1, r6, #16
 8003e30:	f107 0210 	add.w	r2, r7, #16
 8003e34:	f105 0310 	add.w	r3, r5, #16
 8003e38:	4674      	mov	r4, lr
 8003e3a:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003e3e:	3c01      	subs	r4, #1
 8003e40:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003e44:	f102 0210 	add.w	r2, r2, #16
 8003e48:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 8003e4c:	f101 0110 	add.w	r1, r1, #16
 8003e50:	ed52 6a08 	vldr	s13, [r2, #-32]	@ 0xffffffe0
 8003e54:	f103 0310 	add.w	r3, r3, #16
 8003e58:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8003e5c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8003e60:	ee77 6a66 	vsub.f32	s13, s14, s13
 8003e64:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 8003e68:	ed03 6a07 	vstr	s12, [r3, #-28]	@ 0xffffffe4
 8003e6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e70:	ed43 6a08 	vstr	s13, [r3, #-32]	@ 0xffffffe0
 8003e74:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8003e78:	ed52 6a05 	vldr	s13, [r2, #-20]	@ 0xffffffec
 8003e7c:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8003e80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e84:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8003e88:	d1d7      	bne.n	8003e3a <arm_mat_sub_f32+0x32>
 8003e8a:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8003e8e:	441e      	add	r6, r3
 8003e90:	441f      	add	r7, r3
 8003e92:	441d      	add	r5, r3
 8003e94:	f010 0303 	ands.w	r3, r0, #3
 8003e98:	bf18      	it	ne
 8003e9a:	462a      	movne	r2, r5
 8003e9c:	d009      	beq.n	8003eb2 <arm_mat_sub_f32+0xaa>
 8003e9e:	ecf6 7a01 	vldmia	r6!, {s15}
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	ecb7 7a01 	vldmia	r7!, {s14}
 8003ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eac:	ece2 7a01 	vstmia	r2!, {s15}
 8003eb0:	d1f5      	bne.n	8003e9e <arm_mat_sub_f32+0x96>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	b240      	sxtb	r0, r0
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	20fd      	movs	r0, #253	@ 0xfd
 8003eba:	b240      	sxtb	r0, r0
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	bf00      	nop

08003ec0 <arm_mat_mult_f32>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	b087      	sub	sp, #28
 8003ec6:	8844      	ldrh	r4, [r0, #2]
 8003ec8:	880b      	ldrh	r3, [r1, #0]
 8003eca:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003ece:	8800      	ldrh	r0, [r0, #0]
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	9003      	str	r0, [sp, #12]
 8003eda:	6850      	ldr	r0, [r2, #4]
 8003edc:	9004      	str	r0, [sp, #16]
 8003ede:	f040 8091 	bne.w	8004004 <arm_mat_mult_f32+0x144>
 8003ee2:	8810      	ldrh	r0, [r2, #0]
 8003ee4:	42a8      	cmp	r0, r5
 8003ee6:	f040 808d 	bne.w	8004004 <arm_mat_mult_f32+0x144>
 8003eea:	8852      	ldrh	r2, [r2, #2]
 8003eec:	454a      	cmp	r2, r9
 8003eee:	f040 8089 	bne.w	8004004 <arm_mat_mult_f32+0x144>
 8003ef2:	f003 0003 	and.w	r0, r3, #3
 8003ef6:	089a      	lsrs	r2, r3, #2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	684d      	ldr	r5, [r1, #4]
 8003efc:	4607      	mov	r7, r0
 8003efe:	1e54      	subs	r4, r2, #1
 8003f00:	4616      	mov	r6, r2
 8003f02:	9305      	str	r3, [sp, #20]
 8003f04:	1e7a      	subs	r2, r7, #1
 8003f06:	2300      	movs	r3, #0
 8003f08:	9000      	str	r0, [sp, #0]
 8003f0a:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	b292      	uxth	r2, r2
 8003f12:	b2a3      	uxth	r3, r4
 8003f14:	3201      	adds	r2, #1
 8003f16:	ea4f 0489 	mov.w	r4, r9, lsl #2
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8003f20:	fb00 fb03 	mul.w	fp, r0, r3
 8003f24:	eb0c 1803 	add.w	r8, ip, r3, lsl #4
 8003f28:	f8cd a004 	str.w	sl, [sp, #4]
 8003f2c:	46da      	mov	sl, fp
 8003f2e:	468b      	mov	fp, r1
 8003f30:	4631      	mov	r1, r6
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	2700      	movs	r7, #0
 8003f36:	9a02      	ldr	r2, [sp, #8]
 8003f38:	f108 0610 	add.w	r6, r8, #16
 8003f3c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8003f40:	2900      	cmp	r1, #0
 8003f42:	d05b      	beq.n	8003ffc <arm_mat_mult_f32+0x13c>
 8003f44:	f10c 0010 	add.w	r0, ip, #16
 8003f48:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004010 <arm_mat_mult_f32+0x150>
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	ed50 6a04 	vldr	s13, [r0, #-16]
 8003f52:	1913      	adds	r3, r2, r4
 8003f54:	ed92 7a00 	vldr	s14, [r2]
 8003f58:	3010      	adds	r0, #16
 8003f5a:	edd3 5a00 	vldr	s11, [r3]
 8003f5e:	4423      	add	r3, r4
 8003f60:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003f64:	ed50 6a07 	vldr	s13, [r0, #-28]	@ 0xffffffe4
 8003f68:	ed93 6a00 	vldr	s12, [r3]
 8003f6c:	4423      	add	r3, r4
 8003f6e:	ee26 5aa5 	vmul.f32	s10, s13, s11
 8003f72:	ed50 5a06 	vldr	s11, [r0, #-24]	@ 0xffffffe8
 8003f76:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003f7a:	ed93 7a00 	vldr	s14, [r3]
 8003f7e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8003f82:	ed50 5a05 	vldr	s11, [r0, #-20]	@ 0xffffffec
 8003f86:	42b0      	cmp	r0, r6
 8003f88:	eb03 0204 	add.w	r2, r3, r4
 8003f8c:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003f90:	ee25 7a87 	vmul.f32	s14, s11, s14
 8003f94:	ee76 7a26 	vadd.f32	s15, s12, s13
 8003f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9c:	d1d7      	bne.n	8003f4e <arm_mat_mult_f32+0x8e>
 8003f9e:	4455      	add	r5, sl
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	9a00      	ldr	r2, [sp, #0]
 8003fa4:	b162      	cbz	r2, 8003fc0 <arm_mat_mult_f32+0x100>
 8003fa6:	9a01      	ldr	r2, [sp, #4]
 8003fa8:	189a      	adds	r2, r3, r2
 8003faa:	ecf3 6a01 	vldmia	r3!, {s13}
 8003fae:	ed95 7a00 	vldr	s14, [r5]
 8003fb2:	4425      	add	r5, r4
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fbe:	d1f4      	bne.n	8003faa <arm_mat_mult_f32+0xea>
 8003fc0:	3701      	adds	r7, #1
 8003fc2:	ecee 7a01 	vstmia	lr!, {s15}
 8003fc6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003fca:	b2bf      	uxth	r7, r7
 8003fcc:	454f      	cmp	r7, r9
 8003fce:	eb03 0587 	add.w	r5, r3, r7, lsl #2
 8003fd2:	d1b5      	bne.n	8003f40 <arm_mat_mult_f32+0x80>
 8003fd4:	9802      	ldr	r0, [sp, #8]
 8003fd6:	9a03      	ldr	r2, [sp, #12]
 8003fd8:	4438      	add	r0, r7
 8003fda:	9d05      	ldr	r5, [sp, #20]
 8003fdc:	3a01      	subs	r2, #1
 8003fde:	4607      	mov	r7, r0
 8003fe0:	44ac      	add	ip, r5
 8003fe2:	44a8      	add	r8, r5
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	b2bb      	uxth	r3, r7
 8003fea:	9203      	str	r2, [sp, #12]
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	2a00      	cmp	r2, #0
 8003ff0:	d19f      	bne.n	8003f32 <arm_mat_mult_f32+0x72>
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	b240      	sxtb	r0, r0
 8003ff6:	b007      	add	sp, #28
 8003ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffc:	4663      	mov	r3, ip
 8003ffe:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8004010 <arm_mat_mult_f32+0x150>
 8004002:	e7ce      	b.n	8003fa2 <arm_mat_mult_f32+0xe2>
 8004004:	20fd      	movs	r0, #253	@ 0xfd
 8004006:	b240      	sxtb	r0, r0
 8004008:	b007      	add	sp, #28
 800400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	00000000 	.word	0x00000000

08004014 <arm_mat_inverse_f32>:
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	8803      	ldrh	r3, [r0, #0]
 800401a:	b089      	sub	sp, #36	@ 0x24
 800401c:	8844      	ldrh	r4, [r0, #2]
 800401e:	6845      	ldr	r5, [r0, #4]
 8004020:	684a      	ldr	r2, [r1, #4]
 8004022:	429c      	cmp	r4, r3
 8004024:	9500      	str	r5, [sp, #0]
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	d004      	beq.n	8004034 <arm_mat_inverse_f32+0x20>
 800402a:	20fd      	movs	r0, #253	@ 0xfd
 800402c:	b240      	sxtb	r0, r0
 800402e:	b009      	add	sp, #36	@ 0x24
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	880b      	ldrh	r3, [r1, #0]
 8004036:	884e      	ldrh	r6, [r1, #2]
 8004038:	429c      	cmp	r4, r3
 800403a:	bf08      	it	eq
 800403c:	429e      	cmpeq	r6, r3
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	d1f1      	bne.n	800402a <arm_mat_inverse_f32+0x16>
 8004046:	2c00      	cmp	r4, #0
 8004048:	f000 80e7 	beq.w	800421a <arm_mat_inverse_f32+0x206>
 800404c:	f06f 4a40 	mvn.w	sl, #3221225472	@ 0xc0000000
 8004050:	461e      	mov	r6, r3
 8004052:	4623      	mov	r3, r4
 8004054:	1e67      	subs	r7, r4, #1
 8004056:	44a2      	add	sl, r4
 8004058:	9007      	str	r0, [sp, #28]
 800405a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 800405e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004062:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004066:	4634      	mov	r4, r6
 8004068:	4698      	mov	r8, r3
 800406a:	e004      	b.n	8004076 <arm_mat_inverse_f32+0x62>
 800406c:	3401      	adds	r4, #1
 800406e:	f1aa 0a04 	sub.w	sl, sl, #4
 8004072:	f000 faba 	bl	80045ea <memset>
 8004076:	4648      	mov	r0, r9
 8004078:	4632      	mov	r2, r6
 800407a:	2100      	movs	r1, #0
 800407c:	b114      	cbz	r4, 8004084 <arm_mat_inverse_f32+0x70>
 800407e:	44b1      	add	r9, r6
 8004080:	f000 fab3 	bl	80045ea <memset>
 8004084:	f109 0004 	add.w	r0, r9, #4
 8004088:	42bc      	cmp	r4, r7
 800408a:	f8c9 b000 	str.w	fp, [r9]
 800408e:	4652      	mov	r2, sl
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f106 0604 	add.w	r6, r6, #4
 8004098:	eb00 090a 	add.w	r9, r0, sl
 800409c:	d1e6      	bne.n	800406c <arm_mat_inverse_f32+0x58>
 800409e:	4643      	mov	r3, r8
 80040a0:	46a0      	mov	r8, r4
 80040a2:	2700      	movs	r7, #0
 80040a4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80040a8:	461c      	mov	r4, r3
 80040aa:	009e      	lsls	r6, r3, #2
 80040ac:	f8cd 8008 	str.w	r8, [sp, #8]
 80040b0:	1d33      	adds	r3, r6, #4
 80040b2:	46b1      	mov	r9, r6
 80040b4:	46a6      	mov	lr, r4
 80040b6:	9705      	str	r7, [sp, #20]
 80040b8:	9306      	str	r3, [sp, #24]
 80040ba:	42bc      	cmp	r4, r7
 80040bc:	edd5 6a00 	vldr	s13, [r5]
 80040c0:	f000 80c2 	beq.w	8004248 <arm_mat_inverse_f32+0x234>
 80040c4:	463a      	mov	r2, r7
 80040c6:	462b      	mov	r3, r5
 80040c8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80042a0 <arm_mat_inverse_f32+0x28c>
 80040cc:	e00a      	b.n	80040e4 <arm_mat_inverse_f32+0xd0>
 80040ce:	eef4 7a47 	vcmp.f32	s15, s14
 80040d2:	3201      	adds	r2, #1
 80040d4:	4433      	add	r3, r6
 80040d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040da:	bfc8      	it	gt
 80040dc:	eeb0 7a67 	vmovgt.f32	s14, s15
 80040e0:	4294      	cmp	r4, r2
 80040e2:	d009      	beq.n	80040f8 <arm_mat_inverse_f32+0xe4>
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	dced      	bgt.n	80040ce <arm_mat_inverse_f32+0xba>
 80040f2:	eef1 7a67 	vneg.f32	s15, s15
 80040f6:	e7ea      	b.n	80040ce <arm_mat_inverse_f32+0xba>
 80040f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	f000 80a2 	beq.w	8004248 <arm_mat_inverse_f32+0x234>
 8004104:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	f340 809e 	ble.w	800424c <arm_mat_inverse_f32+0x238>
 8004110:	eef0 7a66 	vmov.f32	s15, s13
 8004114:	eef4 7a47 	vcmp.f32	s15, s14
 8004118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411c:	d010      	beq.n	8004140 <arm_mat_inverse_f32+0x12c>
 800411e:	9b02      	ldr	r3, [sp, #8]
 8004120:	b173      	cbz	r3, 8004140 <arm_mat_inverse_f32+0x12c>
 8004122:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004126:	eef1 7a66 	vneg.f32	s15, s13
 800412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412e:	bfc8      	it	gt
 8004130:	eef0 7a66 	vmovgt.f32	s15, s13
 8004134:	eef4 7a47 	vcmp.f32	s15, s14
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	f000 808b 	beq.w	8004256 <arm_mat_inverse_f32+0x242>
 8004140:	eef5 6a40 	vcmp.f32	s13, #0.0
 8004144:	9b05      	ldr	r3, [sp, #20]
 8004146:	f083 0301 	eor.w	r3, r3, #1
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	d101      	bne.n	8004156 <arm_mat_inverse_f32+0x142>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d178      	bne.n	8004248 <arm_mat_inverse_f32+0x234>
 8004156:	eb0c 0306 	add.w	r3, ip, r6
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	4672      	mov	r2, lr
 800415e:	462b      	mov	r3, r5
 8004160:	edd3 7a00 	vldr	s15, [r3]
 8004164:	3a01      	subs	r2, #1
 8004166:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800416a:	ece3 7a01 	vstmia	r3!, {s15}
 800416e:	d1f7      	bne.n	8004160 <arm_mat_inverse_f32+0x14c>
 8004170:	4621      	mov	r1, r4
 8004172:	4663      	mov	r3, ip
 8004174:	edd3 7a00 	vldr	s15, [r3]
 8004178:	3901      	subs	r1, #1
 800417a:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800417e:	ece3 7a01 	vstmia	r3!, {s15}
 8004182:	d1f7      	bne.n	8004174 <arm_mat_inverse_f32+0x160>
 8004184:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8004188:	9801      	ldr	r0, [sp, #4]
 800418a:	f8dd b000 	ldr.w	fp, [sp]
 800418e:	42b9      	cmp	r1, r7
 8004190:	f000 8082 	beq.w	8004298 <arm_mat_inverse_f32+0x284>
 8004194:	eddb 6a00 	vldr	s13, [fp]
 8004198:	4672      	mov	r2, lr
 800419a:	46aa      	mov	sl, r5
 800419c:	465b      	mov	r3, fp
 800419e:	ecfa 7a01 	vldmia	sl!, {s15}
 80041a2:	3a01      	subs	r2, #1
 80041a4:	ed93 7a00 	vldr	s14, [r3]
 80041a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b0:	ece3 7a01 	vstmia	r3!, {s15}
 80041b4:	d1f3      	bne.n	800419e <arm_mat_inverse_f32+0x18a>
 80041b6:	44cb      	add	fp, r9
 80041b8:	4622      	mov	r2, r4
 80041ba:	46e2      	mov	sl, ip
 80041bc:	4603      	mov	r3, r0
 80041be:	ecfa 7a01 	vldmia	sl!, {s15}
 80041c2:	3a01      	subs	r2, #1
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d0:	ece3 7a01 	vstmia	r3!, {s15}
 80041d4:	d1f3      	bne.n	80041be <arm_mat_inverse_f32+0x1aa>
 80041d6:	4430      	add	r0, r6
 80041d8:	3101      	adds	r1, #1
 80041da:	44c3      	add	fp, r8
 80041dc:	428c      	cmp	r4, r1
 80041de:	d1d6      	bne.n	800418e <arm_mat_inverse_f32+0x17a>
 80041e0:	9b00      	ldr	r3, [sp, #0]
 80041e2:	f1be 0e01 	subs.w	lr, lr, #1
 80041e6:	f107 0701 	add.w	r7, r7, #1
 80041ea:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80041ee:	f103 0304 	add.w	r3, r3, #4
 80041f2:	f1a9 0904 	sub.w	r9, r9, #4
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	9b06      	ldr	r3, [sp, #24]
 80041fa:	441d      	add	r5, r3
 80041fc:	9b02      	ldr	r3, [sp, #8]
 80041fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004202:	9302      	str	r3, [sp, #8]
 8004204:	f47f af59 	bne.w	80040ba <arm_mat_inverse_f32+0xa6>
 8004208:	eef5 6a40 	vcmp.f32	s13, #0.0
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	d11f      	bne.n	8004252 <arm_mat_inverse_f32+0x23e>
 8004212:	9b04      	ldr	r3, [sp, #16]
 8004214:	b1eb      	cbz	r3, 8004252 <arm_mat_inverse_f32+0x23e>
 8004216:	9b07      	ldr	r3, [sp, #28]
 8004218:	685d      	ldr	r5, [r3, #4]
 800421a:	fb04 f404 	mul.w	r4, r4, r4
 800421e:	b19c      	cbz	r4, 8004248 <arm_mat_inverse_f32+0x234>
 8004220:	edd5 7a00 	vldr	s15, [r5]
 8004224:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	d111      	bne.n	8004252 <arm_mat_inverse_f32+0x23e>
 800422e:	3504      	adds	r5, #4
 8004230:	2300      	movs	r3, #0
 8004232:	e006      	b.n	8004242 <arm_mat_inverse_f32+0x22e>
 8004234:	ecf5 7a01 	vldmia	r5!, {s15}
 8004238:	eef5 7a40 	vcmp.f32	s15, #0.0
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d107      	bne.n	8004252 <arm_mat_inverse_f32+0x23e>
 8004242:	3301      	adds	r3, #1
 8004244:	42a3      	cmp	r3, r4
 8004246:	d1f5      	bne.n	8004234 <arm_mat_inverse_f32+0x220>
 8004248:	20fb      	movs	r0, #251	@ 0xfb
 800424a:	e6ef      	b.n	800402c <arm_mat_inverse_f32+0x18>
 800424c:	eef1 7a66 	vneg.f32	s15, s13
 8004250:	e760      	b.n	8004114 <arm_mat_inverse_f32+0x100>
 8004252:	2000      	movs	r0, #0
 8004254:	e6ea      	b.n	800402c <arm_mat_inverse_f32+0x18>
 8004256:	4671      	mov	r1, lr
 8004258:	462a      	mov	r2, r5
 800425a:	9b00      	ldr	r3, [sp, #0]
 800425c:	6810      	ldr	r0, [r2, #0]
 800425e:	3901      	subs	r1, #1
 8004260:	f8d3 8000 	ldr.w	r8, [r3]
 8004264:	f842 8b04 	str.w	r8, [r2], #4
 8004268:	f843 0b04 	str.w	r0, [r3], #4
 800426c:	d1f6      	bne.n	800425c <arm_mat_inverse_f32+0x248>
 800426e:	eb0c 0306 	add.w	r3, ip, r6
 8004272:	4661      	mov	r1, ip
 8004274:	461a      	mov	r2, r3
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	4623      	mov	r3, r4
 800427a:	6810      	ldr	r0, [r2, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	f8d1 8000 	ldr.w	r8, [r1]
 8004282:	f842 8b04 	str.w	r8, [r2], #4
 8004286:	f841 0b04 	str.w	r0, [r1], #4
 800428a:	d1f6      	bne.n	800427a <arm_mat_inverse_f32+0x266>
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	2301      	movs	r3, #1
 8004290:	edd5 6a00 	vldr	s13, [r5]
 8004294:	9305      	str	r3, [sp, #20]
 8004296:	e761      	b.n	800415c <arm_mat_inverse_f32+0x148>
 8004298:	44cb      	add	fp, r9
 800429a:	4430      	add	r0, r6
 800429c:	e79c      	b.n	80041d8 <arm_mat_inverse_f32+0x1c4>
 800429e:	bf00      	nop
 80042a0:	00000000 	.word	0x00000000

080042a4 <arm_mat_init_f32>:
 80042a4:	8001      	strh	r1, [r0, #0]
 80042a6:	8042      	strh	r2, [r0, #2]
 80042a8:	6043      	str	r3, [r0, #4]
 80042aa:	4770      	bx	lr

080042ac <arm_mat_add_f32>:
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	6803      	ldr	r3, [r0, #0]
 80042b0:	6846      	ldr	r6, [r0, #4]
 80042b2:	6855      	ldr	r5, [r2, #4]
 80042b4:	e891 0090 	ldmia.w	r1, {r4, r7}
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d14f      	bne.n	800435c <arm_mat_add_f32+0xb0>
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	4293      	cmp	r3, r2
 80042c0:	d14c      	bne.n	800435c <arm_mat_add_f32+0xb0>
 80042c2:	8842      	ldrh	r2, [r0, #2]
 80042c4:	8803      	ldrh	r3, [r0, #0]
 80042c6:	fb03 f002 	mul.w	r0, r3, r2
 80042ca:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80042ce:	d033      	beq.n	8004338 <arm_mat_add_f32+0x8c>
 80042d0:	f106 0110 	add.w	r1, r6, #16
 80042d4:	f107 0210 	add.w	r2, r7, #16
 80042d8:	f105 0310 	add.w	r3, r5, #16
 80042dc:	4674      	mov	r4, lr
 80042de:	ed51 7a03 	vldr	s15, [r1, #-12]
 80042e2:	3c01      	subs	r4, #1
 80042e4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80042e8:	f102 0210 	add.w	r2, r2, #16
 80042ec:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 80042f0:	f101 0110 	add.w	r1, r1, #16
 80042f4:	ed52 6a08 	vldr	s13, [r2, #-32]	@ 0xffffffe0
 80042f8:	f103 0310 	add.w	r3, r3, #16
 80042fc:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004300:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8004304:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004308:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 800430c:	ed03 6a07 	vstr	s12, [r3, #-28]	@ 0xffffffe4
 8004310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004314:	ed43 6a08 	vstr	s13, [r3, #-32]	@ 0xffffffe0
 8004318:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 800431c:	ed52 6a05 	vldr	s13, [r2, #-20]	@ 0xffffffec
 8004320:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8004324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004328:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800432c:	d1d7      	bne.n	80042de <arm_mat_add_f32+0x32>
 800432e:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8004332:	441e      	add	r6, r3
 8004334:	441f      	add	r7, r3
 8004336:	441d      	add	r5, r3
 8004338:	f010 0303 	ands.w	r3, r0, #3
 800433c:	bf18      	it	ne
 800433e:	462a      	movne	r2, r5
 8004340:	d009      	beq.n	8004356 <arm_mat_add_f32+0xaa>
 8004342:	ecf6 7a01 	vldmia	r6!, {s15}
 8004346:	3b01      	subs	r3, #1
 8004348:	ecb7 7a01 	vldmia	r7!, {s14}
 800434c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004350:	ece2 7a01 	vstmia	r2!, {s15}
 8004354:	d1f5      	bne.n	8004342 <arm_mat_add_f32+0x96>
 8004356:	2000      	movs	r0, #0
 8004358:	b240      	sxtb	r0, r0
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	20fd      	movs	r0, #253	@ 0xfd
 800435e:	b240      	sxtb	r0, r0
 8004360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004362:	bf00      	nop

08004364 <rand>:
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <rand+0x5c>)
 8004366:	b510      	push	{r4, lr}
 8004368:	681c      	ldr	r4, [r3, #0]
 800436a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800436c:	b9b3      	cbnz	r3, 800439c <rand+0x38>
 800436e:	2018      	movs	r0, #24
 8004370:	f000 fa2e 	bl	80047d0 <malloc>
 8004374:	4602      	mov	r2, r0
 8004376:	6320      	str	r0, [r4, #48]	@ 0x30
 8004378:	b920      	cbnz	r0, 8004384 <rand+0x20>
 800437a:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <rand+0x60>)
 800437c:	4812      	ldr	r0, [pc, #72]	@ (80043c8 <rand+0x64>)
 800437e:	2152      	movs	r1, #82	@ 0x52
 8004380:	f000 f9be 	bl	8004700 <__assert_func>
 8004384:	4911      	ldr	r1, [pc, #68]	@ (80043cc <rand+0x68>)
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <rand+0x6c>)
 8004388:	e9c0 1300 	strd	r1, r3, [r0]
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <rand+0x70>)
 800438e:	6083      	str	r3, [r0, #8]
 8004390:	230b      	movs	r3, #11
 8004392:	8183      	strh	r3, [r0, #12]
 8004394:	2100      	movs	r1, #0
 8004396:	2001      	movs	r0, #1
 8004398:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800439c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800439e:	480e      	ldr	r0, [pc, #56]	@ (80043d8 <rand+0x74>)
 80043a0:	690b      	ldr	r3, [r1, #16]
 80043a2:	694c      	ldr	r4, [r1, #20]
 80043a4:	4a0d      	ldr	r2, [pc, #52]	@ (80043dc <rand+0x78>)
 80043a6:	4358      	muls	r0, r3
 80043a8:	fb02 0004 	mla	r0, r2, r4, r0
 80043ac:	fba3 3202 	umull	r3, r2, r3, r2
 80043b0:	3301      	adds	r3, #1
 80043b2:	eb40 0002 	adc.w	r0, r0, r2
 80043b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80043ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	2400002c 	.word	0x2400002c
 80043c4:	080056d0 	.word	0x080056d0
 80043c8:	080056e7 	.word	0x080056e7
 80043cc:	abcd330e 	.word	0xabcd330e
 80043d0:	e66d1234 	.word	0xe66d1234
 80043d4:	0005deec 	.word	0x0005deec
 80043d8:	5851f42d 	.word	0x5851f42d
 80043dc:	4c957f2d 	.word	0x4c957f2d

080043e0 <std>:
 80043e0:	2300      	movs	r3, #0
 80043e2:	b510      	push	{r4, lr}
 80043e4:	4604      	mov	r4, r0
 80043e6:	e9c0 3300 	strd	r3, r3, [r0]
 80043ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ee:	6083      	str	r3, [r0, #8]
 80043f0:	8181      	strh	r1, [r0, #12]
 80043f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80043f4:	81c2      	strh	r2, [r0, #14]
 80043f6:	6183      	str	r3, [r0, #24]
 80043f8:	4619      	mov	r1, r3
 80043fa:	2208      	movs	r2, #8
 80043fc:	305c      	adds	r0, #92	@ 0x5c
 80043fe:	f000 f8f4 	bl	80045ea <memset>
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <std+0x58>)
 8004404:	6263      	str	r3, [r4, #36]	@ 0x24
 8004406:	4b0d      	ldr	r3, [pc, #52]	@ (800443c <std+0x5c>)
 8004408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <std+0x60>)
 800440c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <std+0x64>)
 8004410:	6323      	str	r3, [r4, #48]	@ 0x30
 8004412:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <std+0x68>)
 8004414:	6224      	str	r4, [r4, #32]
 8004416:	429c      	cmp	r4, r3
 8004418:	d006      	beq.n	8004428 <std+0x48>
 800441a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800441e:	4294      	cmp	r4, r2
 8004420:	d002      	beq.n	8004428 <std+0x48>
 8004422:	33d0      	adds	r3, #208	@ 0xd0
 8004424:	429c      	cmp	r4, r3
 8004426:	d105      	bne.n	8004434 <std+0x54>
 8004428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f000 b954 	b.w	80046dc <__retarget_lock_init_recursive>
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop
 8004438:	08004565 	.word	0x08004565
 800443c:	08004587 	.word	0x08004587
 8004440:	080045bf 	.word	0x080045bf
 8004444:	080045e3 	.word	0x080045e3
 8004448:	24000138 	.word	0x24000138

0800444c <stdio_exit_handler>:
 800444c:	4a02      	ldr	r2, [pc, #8]	@ (8004458 <stdio_exit_handler+0xc>)
 800444e:	4903      	ldr	r1, [pc, #12]	@ (800445c <stdio_exit_handler+0x10>)
 8004450:	4803      	ldr	r0, [pc, #12]	@ (8004460 <stdio_exit_handler+0x14>)
 8004452:	f000 b869 	b.w	8004528 <_fwalk_sglue>
 8004456:	bf00      	nop
 8004458:	24000020 	.word	0x24000020
 800445c:	08004a45 	.word	0x08004a45
 8004460:	24000030 	.word	0x24000030

08004464 <cleanup_stdio>:
 8004464:	6841      	ldr	r1, [r0, #4]
 8004466:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <cleanup_stdio+0x34>)
 8004468:	4299      	cmp	r1, r3
 800446a:	b510      	push	{r4, lr}
 800446c:	4604      	mov	r4, r0
 800446e:	d001      	beq.n	8004474 <cleanup_stdio+0x10>
 8004470:	f000 fae8 	bl	8004a44 <_fflush_r>
 8004474:	68a1      	ldr	r1, [r4, #8]
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <cleanup_stdio+0x38>)
 8004478:	4299      	cmp	r1, r3
 800447a:	d002      	beq.n	8004482 <cleanup_stdio+0x1e>
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fae1 	bl	8004a44 <_fflush_r>
 8004482:	68e1      	ldr	r1, [r4, #12]
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <cleanup_stdio+0x3c>)
 8004486:	4299      	cmp	r1, r3
 8004488:	d004      	beq.n	8004494 <cleanup_stdio+0x30>
 800448a:	4620      	mov	r0, r4
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	f000 bad8 	b.w	8004a44 <_fflush_r>
 8004494:	bd10      	pop	{r4, pc}
 8004496:	bf00      	nop
 8004498:	24000138 	.word	0x24000138
 800449c:	240001a0 	.word	0x240001a0
 80044a0:	24000208 	.word	0x24000208

080044a4 <global_stdio_init.part.0>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <global_stdio_init.part.0+0x30>)
 80044a8:	4c0b      	ldr	r4, [pc, #44]	@ (80044d8 <global_stdio_init.part.0+0x34>)
 80044aa:	4a0c      	ldr	r2, [pc, #48]	@ (80044dc <global_stdio_init.part.0+0x38>)
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	4620      	mov	r0, r4
 80044b0:	2200      	movs	r2, #0
 80044b2:	2104      	movs	r1, #4
 80044b4:	f7ff ff94 	bl	80043e0 <std>
 80044b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044bc:	2201      	movs	r2, #1
 80044be:	2109      	movs	r1, #9
 80044c0:	f7ff ff8e 	bl	80043e0 <std>
 80044c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044c8:	2202      	movs	r2, #2
 80044ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ce:	2112      	movs	r1, #18
 80044d0:	f7ff bf86 	b.w	80043e0 <std>
 80044d4:	24000270 	.word	0x24000270
 80044d8:	24000138 	.word	0x24000138
 80044dc:	0800444d 	.word	0x0800444d

080044e0 <__sfp_lock_acquire>:
 80044e0:	4801      	ldr	r0, [pc, #4]	@ (80044e8 <__sfp_lock_acquire+0x8>)
 80044e2:	f000 b8fc 	b.w	80046de <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	24000279 	.word	0x24000279

080044ec <__sfp_lock_release>:
 80044ec:	4801      	ldr	r0, [pc, #4]	@ (80044f4 <__sfp_lock_release+0x8>)
 80044ee:	f000 b8f7 	b.w	80046e0 <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	24000279 	.word	0x24000279

080044f8 <__sinit>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	4604      	mov	r4, r0
 80044fc:	f7ff fff0 	bl	80044e0 <__sfp_lock_acquire>
 8004500:	6a23      	ldr	r3, [r4, #32]
 8004502:	b11b      	cbz	r3, 800450c <__sinit+0x14>
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f7ff bff0 	b.w	80044ec <__sfp_lock_release>
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <__sinit+0x28>)
 800450e:	6223      	str	r3, [r4, #32]
 8004510:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <__sinit+0x2c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f5      	bne.n	8004504 <__sinit+0xc>
 8004518:	f7ff ffc4 	bl	80044a4 <global_stdio_init.part.0>
 800451c:	e7f2      	b.n	8004504 <__sinit+0xc>
 800451e:	bf00      	nop
 8004520:	08004465 	.word	0x08004465
 8004524:	24000270 	.word	0x24000270

08004528 <_fwalk_sglue>:
 8004528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800452c:	4607      	mov	r7, r0
 800452e:	4688      	mov	r8, r1
 8004530:	4614      	mov	r4, r2
 8004532:	2600      	movs	r6, #0
 8004534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004538:	f1b9 0901 	subs.w	r9, r9, #1
 800453c:	d505      	bpl.n	800454a <_fwalk_sglue+0x22>
 800453e:	6824      	ldr	r4, [r4, #0]
 8004540:	2c00      	cmp	r4, #0
 8004542:	d1f7      	bne.n	8004534 <_fwalk_sglue+0xc>
 8004544:	4630      	mov	r0, r6
 8004546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800454a:	89ab      	ldrh	r3, [r5, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d907      	bls.n	8004560 <_fwalk_sglue+0x38>
 8004550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004554:	3301      	adds	r3, #1
 8004556:	d003      	beq.n	8004560 <_fwalk_sglue+0x38>
 8004558:	4629      	mov	r1, r5
 800455a:	4638      	mov	r0, r7
 800455c:	47c0      	blx	r8
 800455e:	4306      	orrs	r6, r0
 8004560:	3568      	adds	r5, #104	@ 0x68
 8004562:	e7e9      	b.n	8004538 <_fwalk_sglue+0x10>

08004564 <__sread>:
 8004564:	b510      	push	{r4, lr}
 8004566:	460c      	mov	r4, r1
 8004568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456c:	f000 f868 	bl	8004640 <_read_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	bfab      	itete	ge
 8004574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004576:	89a3      	ldrhlt	r3, [r4, #12]
 8004578:	181b      	addge	r3, r3, r0
 800457a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800457e:	bfac      	ite	ge
 8004580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004582:	81a3      	strhlt	r3, [r4, #12]
 8004584:	bd10      	pop	{r4, pc}

08004586 <__swrite>:
 8004586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	461f      	mov	r7, r3
 800458c:	898b      	ldrh	r3, [r1, #12]
 800458e:	05db      	lsls	r3, r3, #23
 8004590:	4605      	mov	r5, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4616      	mov	r6, r2
 8004596:	d505      	bpl.n	80045a4 <__swrite+0x1e>
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	2302      	movs	r3, #2
 800459e:	2200      	movs	r2, #0
 80045a0:	f000 f83c 	bl	800461c <_lseek_r>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	4632      	mov	r2, r6
 80045b2:	463b      	mov	r3, r7
 80045b4:	4628      	mov	r0, r5
 80045b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ba:	f000 b853 	b.w	8004664 <_write_r>

080045be <__sseek>:
 80045be:	b510      	push	{r4, lr}
 80045c0:	460c      	mov	r4, r1
 80045c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c6:	f000 f829 	bl	800461c <_lseek_r>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	bf15      	itete	ne
 80045d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045da:	81a3      	strheq	r3, [r4, #12]
 80045dc:	bf18      	it	ne
 80045de:	81a3      	strhne	r3, [r4, #12]
 80045e0:	bd10      	pop	{r4, pc}

080045e2 <__sclose>:
 80045e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e6:	f000 b809 	b.w	80045fc <_close_r>

080045ea <memset>:
 80045ea:	4402      	add	r2, r0
 80045ec:	4603      	mov	r3, r0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d100      	bne.n	80045f4 <memset+0xa>
 80045f2:	4770      	bx	lr
 80045f4:	f803 1b01 	strb.w	r1, [r3], #1
 80045f8:	e7f9      	b.n	80045ee <memset+0x4>
	...

080045fc <_close_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4d06      	ldr	r5, [pc, #24]	@ (8004618 <_close_r+0x1c>)
 8004600:	2300      	movs	r3, #0
 8004602:	4604      	mov	r4, r0
 8004604:	4608      	mov	r0, r1
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	f7fd fa04 	bl	8001a14 <_close>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_close_r+0x1a>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_close_r+0x1a>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	24000274 	.word	0x24000274

0800461c <_lseek_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d07      	ldr	r5, [pc, #28]	@ (800463c <_lseek_r+0x20>)
 8004620:	4604      	mov	r4, r0
 8004622:	4608      	mov	r0, r1
 8004624:	4611      	mov	r1, r2
 8004626:	2200      	movs	r2, #0
 8004628:	602a      	str	r2, [r5, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	f7fd fa19 	bl	8001a62 <_lseek>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_lseek_r+0x1e>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_lseek_r+0x1e>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	24000274 	.word	0x24000274

08004640 <_read_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d07      	ldr	r5, [pc, #28]	@ (8004660 <_read_r+0x20>)
 8004644:	4604      	mov	r4, r0
 8004646:	4608      	mov	r0, r1
 8004648:	4611      	mov	r1, r2
 800464a:	2200      	movs	r2, #0
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f7fd f9a7 	bl	80019a2 <_read>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_read_r+0x1e>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_read_r+0x1e>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	24000274 	.word	0x24000274

08004664 <_write_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	@ (8004684 <_write_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fd f9b2 	bl	80019dc <_write>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_write_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_write_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	24000274 	.word	0x24000274

08004688 <__errno>:
 8004688:	4b01      	ldr	r3, [pc, #4]	@ (8004690 <__errno+0x8>)
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	2400002c 	.word	0x2400002c

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4d0d      	ldr	r5, [pc, #52]	@ (80046cc <__libc_init_array+0x38>)
 8004698:	4c0d      	ldr	r4, [pc, #52]	@ (80046d0 <__libc_init_array+0x3c>)
 800469a:	1b64      	subs	r4, r4, r5
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	2600      	movs	r6, #0
 80046a0:	42a6      	cmp	r6, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	4d0b      	ldr	r5, [pc, #44]	@ (80046d4 <__libc_init_array+0x40>)
 80046a6:	4c0c      	ldr	r4, [pc, #48]	@ (80046d8 <__libc_init_array+0x44>)
 80046a8:	f000 fff4 	bl	8005694 <_init>
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	2600      	movs	r6, #0
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046bc:	4798      	blx	r3
 80046be:	3601      	adds	r6, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c6:	4798      	blx	r3
 80046c8:	3601      	adds	r6, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	080058f8 	.word	0x080058f8
 80046d0:	080058f8 	.word	0x080058f8
 80046d4:	080058f8 	.word	0x080058f8
 80046d8:	080058fc 	.word	0x080058fc

080046dc <__retarget_lock_init_recursive>:
 80046dc:	4770      	bx	lr

080046de <__retarget_lock_acquire_recursive>:
 80046de:	4770      	bx	lr

080046e0 <__retarget_lock_release_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <memcpy>:
 80046e2:	440a      	add	r2, r1
 80046e4:	4291      	cmp	r1, r2
 80046e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ea:	d100      	bne.n	80046ee <memcpy+0xc>
 80046ec:	4770      	bx	lr
 80046ee:	b510      	push	{r4, lr}
 80046f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f8:	4291      	cmp	r1, r2
 80046fa:	d1f9      	bne.n	80046f0 <memcpy+0xe>
 80046fc:	bd10      	pop	{r4, pc}
	...

08004700 <__assert_func>:
 8004700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004702:	4614      	mov	r4, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <__assert_func+0x2c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4605      	mov	r5, r0
 800470c:	68d8      	ldr	r0, [r3, #12]
 800470e:	b14c      	cbz	r4, 8004724 <__assert_func+0x24>
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <__assert_func+0x30>)
 8004712:	9100      	str	r1, [sp, #0]
 8004714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004718:	4906      	ldr	r1, [pc, #24]	@ (8004734 <__assert_func+0x34>)
 800471a:	462b      	mov	r3, r5
 800471c:	f000 f9ba 	bl	8004a94 <fiprintf>
 8004720:	f000 f9da 	bl	8004ad8 <abort>
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <__assert_func+0x38>)
 8004726:	461c      	mov	r4, r3
 8004728:	e7f3      	b.n	8004712 <__assert_func+0x12>
 800472a:	bf00      	nop
 800472c:	2400002c 	.word	0x2400002c
 8004730:	0800573f 	.word	0x0800573f
 8004734:	0800574c 	.word	0x0800574c
 8004738:	0800577a 	.word	0x0800577a

0800473c <_free_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d041      	beq.n	80047c8 <_free_r+0x8c>
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f0c      	subs	r4, r1, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	18e4      	addlt	r4, r4, r3
 8004750:	f000 f8e8 	bl	8004924 <__malloc_lock>
 8004754:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <_free_r+0x90>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x2c>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	4628      	mov	r0, r5
 8004760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004764:	f000 b8e4 	b.w	8004930 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x42>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x1e>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x4c>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x42>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1850      	adds	r0, r2, r1
 800478c:	42a0      	cmp	r0, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x6c>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4401      	add	r1, r0
 8004794:	1850      	adds	r0, r2, r1
 8004796:	4283      	cmp	r3, r0
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x22>
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	4408      	add	r0, r1
 80047a4:	6010      	str	r0, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x22>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x74>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x22>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x22>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	24000280 	.word	0x24000280

080047d0 <malloc>:
 80047d0:	4b02      	ldr	r3, [pc, #8]	@ (80047dc <malloc+0xc>)
 80047d2:	4601      	mov	r1, r0
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f000 b825 	b.w	8004824 <_malloc_r>
 80047da:	bf00      	nop
 80047dc:	2400002c 	.word	0x2400002c

080047e0 <sbrk_aligned>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4e0f      	ldr	r6, [pc, #60]	@ (8004820 <sbrk_aligned+0x40>)
 80047e4:	460c      	mov	r4, r1
 80047e6:	6831      	ldr	r1, [r6, #0]
 80047e8:	4605      	mov	r5, r0
 80047ea:	b911      	cbnz	r1, 80047f2 <sbrk_aligned+0x12>
 80047ec:	f000 f964 	bl	8004ab8 <_sbrk_r>
 80047f0:	6030      	str	r0, [r6, #0]
 80047f2:	4621      	mov	r1, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 f95f 	bl	8004ab8 <_sbrk_r>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d103      	bne.n	8004806 <sbrk_aligned+0x26>
 80047fe:	f04f 34ff 	mov.w	r4, #4294967295
 8004802:	4620      	mov	r0, r4
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d0f8      	beq.n	8004802 <sbrk_aligned+0x22>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f950 	bl	8004ab8 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d1f2      	bne.n	8004802 <sbrk_aligned+0x22>
 800481c:	e7ef      	b.n	80047fe <sbrk_aligned+0x1e>
 800481e:	bf00      	nop
 8004820:	2400027c 	.word	0x2400027c

08004824 <_malloc_r>:
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004828:	1ccd      	adds	r5, r1, #3
 800482a:	f025 0503 	bic.w	r5, r5, #3
 800482e:	3508      	adds	r5, #8
 8004830:	2d0c      	cmp	r5, #12
 8004832:	bf38      	it	cc
 8004834:	250c      	movcc	r5, #12
 8004836:	2d00      	cmp	r5, #0
 8004838:	4606      	mov	r6, r0
 800483a:	db01      	blt.n	8004840 <_malloc_r+0x1c>
 800483c:	42a9      	cmp	r1, r5
 800483e:	d904      	bls.n	800484a <_malloc_r+0x26>
 8004840:	230c      	movs	r3, #12
 8004842:	6033      	str	r3, [r6, #0]
 8004844:	2000      	movs	r0, #0
 8004846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004920 <_malloc_r+0xfc>
 800484e:	f000 f869 	bl	8004924 <__malloc_lock>
 8004852:	f8d8 3000 	ldr.w	r3, [r8]
 8004856:	461c      	mov	r4, r3
 8004858:	bb44      	cbnz	r4, 80048ac <_malloc_r+0x88>
 800485a:	4629      	mov	r1, r5
 800485c:	4630      	mov	r0, r6
 800485e:	f7ff ffbf 	bl	80047e0 <sbrk_aligned>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	4604      	mov	r4, r0
 8004866:	d158      	bne.n	800491a <_malloc_r+0xf6>
 8004868:	f8d8 4000 	ldr.w	r4, [r8]
 800486c:	4627      	mov	r7, r4
 800486e:	2f00      	cmp	r7, #0
 8004870:	d143      	bne.n	80048fa <_malloc_r+0xd6>
 8004872:	2c00      	cmp	r4, #0
 8004874:	d04b      	beq.n	800490e <_malloc_r+0xea>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	4639      	mov	r1, r7
 800487a:	4630      	mov	r0, r6
 800487c:	eb04 0903 	add.w	r9, r4, r3
 8004880:	f000 f91a 	bl	8004ab8 <_sbrk_r>
 8004884:	4581      	cmp	r9, r0
 8004886:	d142      	bne.n	800490e <_malloc_r+0xea>
 8004888:	6821      	ldr	r1, [r4, #0]
 800488a:	1a6d      	subs	r5, r5, r1
 800488c:	4629      	mov	r1, r5
 800488e:	4630      	mov	r0, r6
 8004890:	f7ff ffa6 	bl	80047e0 <sbrk_aligned>
 8004894:	3001      	adds	r0, #1
 8004896:	d03a      	beq.n	800490e <_malloc_r+0xea>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	442b      	add	r3, r5
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	f8d8 3000 	ldr.w	r3, [r8]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	bb62      	cbnz	r2, 8004900 <_malloc_r+0xdc>
 80048a6:	f8c8 7000 	str.w	r7, [r8]
 80048aa:	e00f      	b.n	80048cc <_malloc_r+0xa8>
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	1b52      	subs	r2, r2, r5
 80048b0:	d420      	bmi.n	80048f4 <_malloc_r+0xd0>
 80048b2:	2a0b      	cmp	r2, #11
 80048b4:	d917      	bls.n	80048e6 <_malloc_r+0xc2>
 80048b6:	1961      	adds	r1, r4, r5
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	6025      	str	r5, [r4, #0]
 80048bc:	bf18      	it	ne
 80048be:	6059      	strne	r1, [r3, #4]
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	bf08      	it	eq
 80048c4:	f8c8 1000 	streq.w	r1, [r8]
 80048c8:	5162      	str	r2, [r4, r5]
 80048ca:	604b      	str	r3, [r1, #4]
 80048cc:	4630      	mov	r0, r6
 80048ce:	f000 f82f 	bl	8004930 <__malloc_unlock>
 80048d2:	f104 000b 	add.w	r0, r4, #11
 80048d6:	1d23      	adds	r3, r4, #4
 80048d8:	f020 0007 	bic.w	r0, r0, #7
 80048dc:	1ac2      	subs	r2, r0, r3
 80048de:	bf1c      	itt	ne
 80048e0:	1a1b      	subne	r3, r3, r0
 80048e2:	50a3      	strne	r3, [r4, r2]
 80048e4:	e7af      	b.n	8004846 <_malloc_r+0x22>
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	bf0c      	ite	eq
 80048ec:	f8c8 2000 	streq.w	r2, [r8]
 80048f0:	605a      	strne	r2, [r3, #4]
 80048f2:	e7eb      	b.n	80048cc <_malloc_r+0xa8>
 80048f4:	4623      	mov	r3, r4
 80048f6:	6864      	ldr	r4, [r4, #4]
 80048f8:	e7ae      	b.n	8004858 <_malloc_r+0x34>
 80048fa:	463c      	mov	r4, r7
 80048fc:	687f      	ldr	r7, [r7, #4]
 80048fe:	e7b6      	b.n	800486e <_malloc_r+0x4a>
 8004900:	461a      	mov	r2, r3
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	42a3      	cmp	r3, r4
 8004906:	d1fb      	bne.n	8004900 <_malloc_r+0xdc>
 8004908:	2300      	movs	r3, #0
 800490a:	6053      	str	r3, [r2, #4]
 800490c:	e7de      	b.n	80048cc <_malloc_r+0xa8>
 800490e:	230c      	movs	r3, #12
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	4630      	mov	r0, r6
 8004914:	f000 f80c 	bl	8004930 <__malloc_unlock>
 8004918:	e794      	b.n	8004844 <_malloc_r+0x20>
 800491a:	6005      	str	r5, [r0, #0]
 800491c:	e7d6      	b.n	80048cc <_malloc_r+0xa8>
 800491e:	bf00      	nop
 8004920:	24000280 	.word	0x24000280

08004924 <__malloc_lock>:
 8004924:	4801      	ldr	r0, [pc, #4]	@ (800492c <__malloc_lock+0x8>)
 8004926:	f7ff beda 	b.w	80046de <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	24000278 	.word	0x24000278

08004930 <__malloc_unlock>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__malloc_unlock+0x8>)
 8004932:	f7ff bed5 	b.w	80046e0 <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	24000278 	.word	0x24000278

0800493c <__sflush_r>:
 800493c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004944:	0716      	lsls	r6, r2, #28
 8004946:	4605      	mov	r5, r0
 8004948:	460c      	mov	r4, r1
 800494a:	d454      	bmi.n	80049f6 <__sflush_r+0xba>
 800494c:	684b      	ldr	r3, [r1, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	dc02      	bgt.n	8004958 <__sflush_r+0x1c>
 8004952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	dd48      	ble.n	80049ea <__sflush_r+0xae>
 8004958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800495a:	2e00      	cmp	r6, #0
 800495c:	d045      	beq.n	80049ea <__sflush_r+0xae>
 800495e:	2300      	movs	r3, #0
 8004960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004964:	682f      	ldr	r7, [r5, #0]
 8004966:	6a21      	ldr	r1, [r4, #32]
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	d030      	beq.n	80049ce <__sflush_r+0x92>
 800496c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	0759      	lsls	r1, r3, #29
 8004972:	d505      	bpl.n	8004980 <__sflush_r+0x44>
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800497a:	b10b      	cbz	r3, 8004980 <__sflush_r+0x44>
 800497c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	2300      	movs	r3, #0
 8004982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004984:	6a21      	ldr	r1, [r4, #32]
 8004986:	4628      	mov	r0, r5
 8004988:	47b0      	blx	r6
 800498a:	1c43      	adds	r3, r0, #1
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	d106      	bne.n	800499e <__sflush_r+0x62>
 8004990:	6829      	ldr	r1, [r5, #0]
 8004992:	291d      	cmp	r1, #29
 8004994:	d82b      	bhi.n	80049ee <__sflush_r+0xb2>
 8004996:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <__sflush_r+0x104>)
 8004998:	40ca      	lsrs	r2, r1
 800499a:	07d6      	lsls	r6, r2, #31
 800499c:	d527      	bpl.n	80049ee <__sflush_r+0xb2>
 800499e:	2200      	movs	r2, #0
 80049a0:	6062      	str	r2, [r4, #4]
 80049a2:	04d9      	lsls	r1, r3, #19
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	d504      	bpl.n	80049b4 <__sflush_r+0x78>
 80049aa:	1c42      	adds	r2, r0, #1
 80049ac:	d101      	bne.n	80049b2 <__sflush_r+0x76>
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	b903      	cbnz	r3, 80049b4 <__sflush_r+0x78>
 80049b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80049b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049b6:	602f      	str	r7, [r5, #0]
 80049b8:	b1b9      	cbz	r1, 80049ea <__sflush_r+0xae>
 80049ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049be:	4299      	cmp	r1, r3
 80049c0:	d002      	beq.n	80049c8 <__sflush_r+0x8c>
 80049c2:	4628      	mov	r0, r5
 80049c4:	f7ff feba 	bl	800473c <_free_r>
 80049c8:	2300      	movs	r3, #0
 80049ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80049cc:	e00d      	b.n	80049ea <__sflush_r+0xae>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b0      	blx	r6
 80049d4:	4602      	mov	r2, r0
 80049d6:	1c50      	adds	r0, r2, #1
 80049d8:	d1c9      	bne.n	800496e <__sflush_r+0x32>
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0c6      	beq.n	800496e <__sflush_r+0x32>
 80049e0:	2b1d      	cmp	r3, #29
 80049e2:	d001      	beq.n	80049e8 <__sflush_r+0xac>
 80049e4:	2b16      	cmp	r3, #22
 80049e6:	d11e      	bne.n	8004a26 <__sflush_r+0xea>
 80049e8:	602f      	str	r7, [r5, #0]
 80049ea:	2000      	movs	r0, #0
 80049ec:	e022      	b.n	8004a34 <__sflush_r+0xf8>
 80049ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f2:	b21b      	sxth	r3, r3
 80049f4:	e01b      	b.n	8004a2e <__sflush_r+0xf2>
 80049f6:	690f      	ldr	r7, [r1, #16]
 80049f8:	2f00      	cmp	r7, #0
 80049fa:	d0f6      	beq.n	80049ea <__sflush_r+0xae>
 80049fc:	0793      	lsls	r3, r2, #30
 80049fe:	680e      	ldr	r6, [r1, #0]
 8004a00:	bf08      	it	eq
 8004a02:	694b      	ldreq	r3, [r1, #20]
 8004a04:	600f      	str	r7, [r1, #0]
 8004a06:	bf18      	it	ne
 8004a08:	2300      	movne	r3, #0
 8004a0a:	eba6 0807 	sub.w	r8, r6, r7
 8004a0e:	608b      	str	r3, [r1, #8]
 8004a10:	f1b8 0f00 	cmp.w	r8, #0
 8004a14:	dde9      	ble.n	80049ea <__sflush_r+0xae>
 8004a16:	6a21      	ldr	r1, [r4, #32]
 8004a18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a1a:	4643      	mov	r3, r8
 8004a1c:	463a      	mov	r2, r7
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b0      	blx	r6
 8004a22:	2800      	cmp	r0, #0
 8004a24:	dc08      	bgt.n	8004a38 <__sflush_r+0xfc>
 8004a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a38:	4407      	add	r7, r0
 8004a3a:	eba8 0800 	sub.w	r8, r8, r0
 8004a3e:	e7e7      	b.n	8004a10 <__sflush_r+0xd4>
 8004a40:	20400001 	.word	0x20400001

08004a44 <_fflush_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	4605      	mov	r5, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	b913      	cbnz	r3, 8004a54 <_fflush_r+0x10>
 8004a4e:	2500      	movs	r5, #0
 8004a50:	4628      	mov	r0, r5
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	b118      	cbz	r0, 8004a5e <_fflush_r+0x1a>
 8004a56:	6a03      	ldr	r3, [r0, #32]
 8004a58:	b90b      	cbnz	r3, 8004a5e <_fflush_r+0x1a>
 8004a5a:	f7ff fd4d 	bl	80044f8 <__sinit>
 8004a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f3      	beq.n	8004a4e <_fflush_r+0xa>
 8004a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a68:	07d0      	lsls	r0, r2, #31
 8004a6a:	d404      	bmi.n	8004a76 <_fflush_r+0x32>
 8004a6c:	0599      	lsls	r1, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_fflush_r+0x32>
 8004a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a72:	f7ff fe34 	bl	80046de <__retarget_lock_acquire_recursive>
 8004a76:	4628      	mov	r0, r5
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f7ff ff5f 	bl	800493c <__sflush_r>
 8004a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a80:	07da      	lsls	r2, r3, #31
 8004a82:	4605      	mov	r5, r0
 8004a84:	d4e4      	bmi.n	8004a50 <_fflush_r+0xc>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	059b      	lsls	r3, r3, #22
 8004a8a:	d4e1      	bmi.n	8004a50 <_fflush_r+0xc>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8e:	f7ff fe27 	bl	80046e0 <__retarget_lock_release_recursive>
 8004a92:	e7dd      	b.n	8004a50 <_fflush_r+0xc>

08004a94 <fiprintf>:
 8004a94:	b40e      	push	{r1, r2, r3}
 8004a96:	b503      	push	{r0, r1, lr}
 8004a98:	4601      	mov	r1, r0
 8004a9a:	ab03      	add	r3, sp, #12
 8004a9c:	4805      	ldr	r0, [pc, #20]	@ (8004ab4 <fiprintf+0x20>)
 8004a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa2:	6800      	ldr	r0, [r0, #0]
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	f000 f847 	bl	8004b38 <_vfiprintf_r>
 8004aaa:	b002      	add	sp, #8
 8004aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab0:	b003      	add	sp, #12
 8004ab2:	4770      	bx	lr
 8004ab4:	2400002c 	.word	0x2400002c

08004ab8 <_sbrk_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	@ (8004ad4 <_sbrk_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fc ffda 	bl	8001a7c <_sbrk>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_sbrk_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_sbrk_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	24000274 	.word	0x24000274

08004ad8 <abort>:
 8004ad8:	b508      	push	{r3, lr}
 8004ada:	2006      	movs	r0, #6
 8004adc:	f000 fb8c 	bl	80051f8 <raise>
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fc ff53 	bl	800198c <_exit>

08004ae6 <__sfputc_r>:
 8004ae6:	6893      	ldr	r3, [r2, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	b410      	push	{r4}
 8004aee:	6093      	str	r3, [r2, #8]
 8004af0:	da08      	bge.n	8004b04 <__sfputc_r+0x1e>
 8004af2:	6994      	ldr	r4, [r2, #24]
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	db01      	blt.n	8004afc <__sfputc_r+0x16>
 8004af8:	290a      	cmp	r1, #10
 8004afa:	d103      	bne.n	8004b04 <__sfputc_r+0x1e>
 8004afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b00:	f000 babe 	b.w	8005080 <__swbuf_r>
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	1c58      	adds	r0, r3, #1
 8004b08:	6010      	str	r0, [r2, #0]
 8004b0a:	7019      	strb	r1, [r3, #0]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <__sfputs_r>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	18d5      	adds	r5, r2, r3
 8004b1e:	42ac      	cmp	r4, r5
 8004b20:	d101      	bne.n	8004b26 <__sfputs_r+0x12>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e007      	b.n	8004b36 <__sfputs_r+0x22>
 8004b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffda 	bl	8004ae6 <__sfputc_r>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d1f3      	bne.n	8004b1e <__sfputs_r+0xa>
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b38 <_vfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	b09d      	sub	sp, #116	@ 0x74
 8004b40:	4614      	mov	r4, r2
 8004b42:	4698      	mov	r8, r3
 8004b44:	4606      	mov	r6, r0
 8004b46:	b118      	cbz	r0, 8004b50 <_vfiprintf_r+0x18>
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <_vfiprintf_r+0x18>
 8004b4c:	f7ff fcd4 	bl	80044f8 <__sinit>
 8004b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b52:	07d9      	lsls	r1, r3, #31
 8004b54:	d405      	bmi.n	8004b62 <_vfiprintf_r+0x2a>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	059a      	lsls	r2, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_vfiprintf_r+0x2a>
 8004b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b5e:	f7ff fdbe 	bl	80046de <__retarget_lock_acquire_recursive>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	d501      	bpl.n	8004b6c <_vfiprintf_r+0x34>
 8004b68:	692b      	ldr	r3, [r5, #16]
 8004b6a:	b99b      	cbnz	r3, 8004b94 <_vfiprintf_r+0x5c>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f000 fac4 	bl	80050fc <__swsetup_r>
 8004b74:	b170      	cbz	r0, 8004b94 <_vfiprintf_r+0x5c>
 8004b76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b78:	07dc      	lsls	r4, r3, #31
 8004b7a:	d504      	bpl.n	8004b86 <_vfiprintf_r+0x4e>
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	b01d      	add	sp, #116	@ 0x74
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	0598      	lsls	r0, r3, #22
 8004b8a:	d4f7      	bmi.n	8004b7c <_vfiprintf_r+0x44>
 8004b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b8e:	f7ff fda7 	bl	80046e0 <__retarget_lock_release_recursive>
 8004b92:	e7f3      	b.n	8004b7c <_vfiprintf_r+0x44>
 8004b94:	2300      	movs	r3, #0
 8004b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b98:	2320      	movs	r3, #32
 8004b9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ba2:	2330      	movs	r3, #48	@ 0x30
 8004ba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d54 <_vfiprintf_r+0x21c>
 8004ba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bac:	f04f 0901 	mov.w	r9, #1
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb8:	b10a      	cbz	r2, 8004bbe <_vfiprintf_r+0x86>
 8004bba:	2a25      	cmp	r2, #37	@ 0x25
 8004bbc:	d1f9      	bne.n	8004bb2 <_vfiprintf_r+0x7a>
 8004bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8004bc2:	d00b      	beq.n	8004bdc <_vfiprintf_r+0xa4>
 8004bc4:	465b      	mov	r3, fp
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ffa2 	bl	8004b14 <__sfputs_r>
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	f000 80a7 	beq.w	8004d24 <_vfiprintf_r+0x1ec>
 8004bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bd8:	445a      	add	r2, fp
 8004bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 809f 	beq.w	8004d24 <_vfiprintf_r+0x1ec>
 8004be6:	2300      	movs	r3, #0
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf0:	f10a 0a01 	add.w	sl, sl, #1
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bfe:	4654      	mov	r4, sl
 8004c00:	2205      	movs	r2, #5
 8004c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c06:	4853      	ldr	r0, [pc, #332]	@ (8004d54 <_vfiprintf_r+0x21c>)
 8004c08:	f7fb fb82 	bl	8000310 <memchr>
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	b9d8      	cbnz	r0, 8004c48 <_vfiprintf_r+0x110>
 8004c10:	06d1      	lsls	r1, r2, #27
 8004c12:	bf44      	itt	mi
 8004c14:	2320      	movmi	r3, #32
 8004c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1a:	0713      	lsls	r3, r2, #28
 8004c1c:	bf44      	itt	mi
 8004c1e:	232b      	movmi	r3, #43	@ 0x2b
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c24:	f89a 3000 	ldrb.w	r3, [sl]
 8004c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c2a:	d015      	beq.n	8004c58 <_vfiprintf_r+0x120>
 8004c2c:	9a07      	ldr	r2, [sp, #28]
 8004c2e:	4654      	mov	r4, sl
 8004c30:	2000      	movs	r0, #0
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c3c:	3b30      	subs	r3, #48	@ 0x30
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d94b      	bls.n	8004cda <_vfiprintf_r+0x1a2>
 8004c42:	b1b0      	cbz	r0, 8004c72 <_vfiprintf_r+0x13a>
 8004c44:	9207      	str	r2, [sp, #28]
 8004c46:	e014      	b.n	8004c72 <_vfiprintf_r+0x13a>
 8004c48:	eba0 0308 	sub.w	r3, r0, r8
 8004c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c50:	4313      	orrs	r3, r2
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	46a2      	mov	sl, r4
 8004c56:	e7d2      	b.n	8004bfe <_vfiprintf_r+0xc6>
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9103      	str	r1, [sp, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bfbb      	ittet	lt
 8004c64:	425b      	neglt	r3, r3
 8004c66:	f042 0202 	orrlt.w	r2, r2, #2
 8004c6a:	9307      	strge	r3, [sp, #28]
 8004c6c:	9307      	strlt	r3, [sp, #28]
 8004c6e:	bfb8      	it	lt
 8004c70:	9204      	strlt	r2, [sp, #16]
 8004c72:	7823      	ldrb	r3, [r4, #0]
 8004c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c76:	d10a      	bne.n	8004c8e <_vfiprintf_r+0x156>
 8004c78:	7863      	ldrb	r3, [r4, #1]
 8004c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c7c:	d132      	bne.n	8004ce4 <_vfiprintf_r+0x1ac>
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	1d1a      	adds	r2, r3, #4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	9203      	str	r2, [sp, #12]
 8004c86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c8a:	3402      	adds	r4, #2
 8004c8c:	9305      	str	r3, [sp, #20]
 8004c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d64 <_vfiprintf_r+0x22c>
 8004c92:	7821      	ldrb	r1, [r4, #0]
 8004c94:	2203      	movs	r2, #3
 8004c96:	4650      	mov	r0, sl
 8004c98:	f7fb fb3a 	bl	8000310 <memchr>
 8004c9c:	b138      	cbz	r0, 8004cae <_vfiprintf_r+0x176>
 8004c9e:	9b04      	ldr	r3, [sp, #16]
 8004ca0:	eba0 000a 	sub.w	r0, r0, sl
 8004ca4:	2240      	movs	r2, #64	@ 0x40
 8004ca6:	4082      	lsls	r2, r0
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	3401      	adds	r4, #1
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb2:	4829      	ldr	r0, [pc, #164]	@ (8004d58 <_vfiprintf_r+0x220>)
 8004cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cb8:	2206      	movs	r2, #6
 8004cba:	f7fb fb29 	bl	8000310 <memchr>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d03f      	beq.n	8004d42 <_vfiprintf_r+0x20a>
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <_vfiprintf_r+0x224>)
 8004cc4:	bb1b      	cbnz	r3, 8004d0e <_vfiprintf_r+0x1d6>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	3307      	adds	r3, #7
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	3308      	adds	r3, #8
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd4:	443b      	add	r3, r7
 8004cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd8:	e76a      	b.n	8004bb0 <_vfiprintf_r+0x78>
 8004cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cde:	460c      	mov	r4, r1
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	e7a8      	b.n	8004c36 <_vfiprintf_r+0xfe>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	3401      	adds	r4, #1
 8004ce8:	9305      	str	r3, [sp, #20]
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0c0a 	mov.w	ip, #10
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf6:	3a30      	subs	r2, #48	@ 0x30
 8004cf8:	2a09      	cmp	r2, #9
 8004cfa:	d903      	bls.n	8004d04 <_vfiprintf_r+0x1cc>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0c6      	beq.n	8004c8e <_vfiprintf_r+0x156>
 8004d00:	9105      	str	r1, [sp, #20]
 8004d02:	e7c4      	b.n	8004c8e <_vfiprintf_r+0x156>
 8004d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d08:	4604      	mov	r4, r0
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7f0      	b.n	8004cf0 <_vfiprintf_r+0x1b8>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <_vfiprintf_r+0x228>)
 8004d16:	a904      	add	r1, sp, #16
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f3af 8000 	nop.w
 8004d1e:	4607      	mov	r7, r0
 8004d20:	1c78      	adds	r0, r7, #1
 8004d22:	d1d6      	bne.n	8004cd2 <_vfiprintf_r+0x19a>
 8004d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d26:	07d9      	lsls	r1, r3, #31
 8004d28:	d405      	bmi.n	8004d36 <_vfiprintf_r+0x1fe>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	059a      	lsls	r2, r3, #22
 8004d2e:	d402      	bmi.n	8004d36 <_vfiprintf_r+0x1fe>
 8004d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d32:	f7ff fcd5 	bl	80046e0 <__retarget_lock_release_recursive>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	065b      	lsls	r3, r3, #25
 8004d3a:	f53f af1f 	bmi.w	8004b7c <_vfiprintf_r+0x44>
 8004d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d40:	e71e      	b.n	8004b80 <_vfiprintf_r+0x48>
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <_vfiprintf_r+0x228>)
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 f879 	bl	8004e44 <_printf_i>
 8004d52:	e7e4      	b.n	8004d1e <_vfiprintf_r+0x1e6>
 8004d54:	0800577b 	.word	0x0800577b
 8004d58:	08005785 	.word	0x08005785
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004b15 	.word	0x08004b15
 8004d64:	08005781 	.word	0x08005781

08004d68 <_printf_common>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	4698      	mov	r8, r3
 8004d70:	688a      	ldr	r2, [r1, #8]
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfb8      	it	lt
 8004d7c:	4613      	movlt	r3, r2
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	b10a      	cbz	r2, 8004d8e <_printf_common+0x26>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	6833      	ldrmi	r3, [r6, #0]
 8004d96:	3302      	addmi	r3, #2
 8004d98:	6033      	strmi	r3, [r6, #0]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d106      	bne.n	8004db0 <_printf_common+0x48>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	6832      	ldr	r2, [r6, #0]
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc26      	bgt.n	8004dfe <_printf_common+0x96>
 8004db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	3b00      	subs	r3, #0
 8004db8:	bf18      	it	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	0692      	lsls	r2, r2, #26
 8004dbe:	d42b      	bmi.n	8004e18 <_printf_common+0xb0>
 8004dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c8      	blx	r9
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d01e      	beq.n	8004e0c <_printf_common+0xa4>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf02      	ittt	eq
 8004dda:	68e5      	ldreq	r5, [r4, #12]
 8004ddc:	6833      	ldreq	r3, [r6, #0]
 8004dde:	1aed      	subeq	r5, r5, r3
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	2600      	movs	r6, #0
 8004df4:	341a      	adds	r4, #26
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	d11a      	bne.n	8004e30 <_printf_common+0xc8>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e008      	b.n	8004e10 <_printf_common+0xa8>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4641      	mov	r1, r8
 8004e04:	4638      	mov	r0, r7
 8004e06:	47c8      	blx	r9
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_printf_common+0xac>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7c6      	b.n	8004da6 <_printf_common+0x3e>
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	2030      	movs	r0, #48	@ 0x30
 8004e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e22:	4422      	add	r2, r4
 8004e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_printf_common+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4622      	mov	r2, r4
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c8      	blx	r9
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0e6      	beq.n	8004e0c <_printf_common+0xa4>
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7d9      	b.n	8004df6 <_printf_common+0x8e>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	7e0f      	ldrb	r7, [r1, #24]
 8004e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e4c:	2f78      	cmp	r7, #120	@ 0x78
 8004e4e:	4691      	mov	r9, r2
 8004e50:	4680      	mov	r8, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	469a      	mov	sl, r3
 8004e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e5a:	d807      	bhi.n	8004e6c <_printf_i+0x28>
 8004e5c:	2f62      	cmp	r7, #98	@ 0x62
 8004e5e:	d80a      	bhi.n	8004e76 <_printf_i+0x32>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	f000 80d1 	beq.w	8005008 <_printf_i+0x1c4>
 8004e66:	2f58      	cmp	r7, #88	@ 0x58
 8004e68:	f000 80b8 	beq.w	8004fdc <_printf_i+0x198>
 8004e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e74:	e03a      	b.n	8004eec <_printf_i+0xa8>
 8004e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e7a:	2b15      	cmp	r3, #21
 8004e7c:	d8f6      	bhi.n	8004e6c <_printf_i+0x28>
 8004e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e84 <_printf_i+0x40>)
 8004e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004e6d 	.word	0x08004e6d
 8004e90:	08004e6d 	.word	0x08004e6d
 8004e94:	08004e6d 	.word	0x08004e6d
 8004e98:	08004e6d 	.word	0x08004e6d
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004e6d 	.word	0x08004e6d
 8004ea4:	08004e6d 	.word	0x08004e6d
 8004ea8:	08004e6d 	.word	0x08004e6d
 8004eac:	08004e6d 	.word	0x08004e6d
 8004eb0:	08004fef 	.word	0x08004fef
 8004eb4:	08004f1b 	.word	0x08004f1b
 8004eb8:	08004fa9 	.word	0x08004fa9
 8004ebc:	08004e6d 	.word	0x08004e6d
 8004ec0:	08004e6d 	.word	0x08004e6d
 8004ec4:	08005011 	.word	0x08005011
 8004ec8:	08004e6d 	.word	0x08004e6d
 8004ecc:	08004f1b 	.word	0x08004f1b
 8004ed0:	08004e6d 	.word	0x08004e6d
 8004ed4:	08004e6d 	.word	0x08004e6d
 8004ed8:	08004fb1 	.word	0x08004fb1
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6032      	str	r2, [r6, #0]
 8004ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e09c      	b.n	800502a <_printf_i+0x1e6>
 8004ef0:	6833      	ldr	r3, [r6, #0]
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	6031      	str	r1, [r6, #0]
 8004ef8:	0606      	lsls	r6, r0, #24
 8004efa:	d501      	bpl.n	8004f00 <_printf_i+0xbc>
 8004efc:	681d      	ldr	r5, [r3, #0]
 8004efe:	e003      	b.n	8004f08 <_printf_i+0xc4>
 8004f00:	0645      	lsls	r5, r0, #25
 8004f02:	d5fb      	bpl.n	8004efc <_printf_i+0xb8>
 8004f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	da03      	bge.n	8004f14 <_printf_i+0xd0>
 8004f0c:	232d      	movs	r3, #45	@ 0x2d
 8004f0e:	426d      	negs	r5, r5
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f14:	4858      	ldr	r0, [pc, #352]	@ (8005078 <_printf_i+0x234>)
 8004f16:	230a      	movs	r3, #10
 8004f18:	e011      	b.n	8004f3e <_printf_i+0xfa>
 8004f1a:	6821      	ldr	r1, [r4, #0]
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	0608      	lsls	r0, r1, #24
 8004f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f24:	d402      	bmi.n	8004f2c <_printf_i+0xe8>
 8004f26:	0649      	lsls	r1, r1, #25
 8004f28:	bf48      	it	mi
 8004f2a:	b2ad      	uxthmi	r5, r5
 8004f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f2e:	4852      	ldr	r0, [pc, #328]	@ (8005078 <_printf_i+0x234>)
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	bf14      	ite	ne
 8004f34:	230a      	movne	r3, #10
 8004f36:	2308      	moveq	r3, #8
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f3e:	6866      	ldr	r6, [r4, #4]
 8004f40:	60a6      	str	r6, [r4, #8]
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	db05      	blt.n	8004f52 <_printf_i+0x10e>
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	432e      	orrs	r6, r5
 8004f4a:	f021 0104 	bic.w	r1, r1, #4
 8004f4e:	6021      	str	r1, [r4, #0]
 8004f50:	d04b      	beq.n	8004fea <_printf_i+0x1a6>
 8004f52:	4616      	mov	r6, r2
 8004f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f58:	fb03 5711 	mls	r7, r3, r1, r5
 8004f5c:	5dc7      	ldrb	r7, [r0, r7]
 8004f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f62:	462f      	mov	r7, r5
 8004f64:	42bb      	cmp	r3, r7
 8004f66:	460d      	mov	r5, r1
 8004f68:	d9f4      	bls.n	8004f54 <_printf_i+0x110>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10b      	bne.n	8004f86 <_printf_i+0x142>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07df      	lsls	r7, r3, #31
 8004f72:	d508      	bpl.n	8004f86 <_printf_i+0x142>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	6861      	ldr	r1, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	bfde      	ittt	le
 8004f7c:	2330      	movle	r3, #48	@ 0x30
 8004f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f86:	1b92      	subs	r2, r2, r6
 8004f88:	6122      	str	r2, [r4, #16]
 8004f8a:	f8cd a000 	str.w	sl, [sp]
 8004f8e:	464b      	mov	r3, r9
 8004f90:	aa03      	add	r2, sp, #12
 8004f92:	4621      	mov	r1, r4
 8004f94:	4640      	mov	r0, r8
 8004f96:	f7ff fee7 	bl	8004d68 <_printf_common>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d14a      	bne.n	8005034 <_printf_i+0x1f0>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	b004      	add	sp, #16
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	4832      	ldr	r0, [pc, #200]	@ (800507c <_printf_i+0x238>)
 8004fb2:	2778      	movs	r7, #120	@ 0x78
 8004fb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	6831      	ldr	r1, [r6, #0]
 8004fbc:	061f      	lsls	r7, r3, #24
 8004fbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fc2:	d402      	bmi.n	8004fca <_printf_i+0x186>
 8004fc4:	065f      	lsls	r7, r3, #25
 8004fc6:	bf48      	it	mi
 8004fc8:	b2ad      	uxthmi	r5, r5
 8004fca:	6031      	str	r1, [r6, #0]
 8004fcc:	07d9      	lsls	r1, r3, #31
 8004fce:	bf44      	itt	mi
 8004fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd4:	6023      	strmi	r3, [r4, #0]
 8004fd6:	b11d      	cbz	r5, 8004fe0 <_printf_i+0x19c>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	e7ad      	b.n	8004f38 <_printf_i+0xf4>
 8004fdc:	4826      	ldr	r0, [pc, #152]	@ (8005078 <_printf_i+0x234>)
 8004fde:	e7e9      	b.n	8004fb4 <_printf_i+0x170>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	e7f6      	b.n	8004fd8 <_printf_i+0x194>
 8004fea:	4616      	mov	r6, r2
 8004fec:	e7bd      	b.n	8004f6a <_printf_i+0x126>
 8004fee:	6833      	ldr	r3, [r6, #0]
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	6961      	ldr	r1, [r4, #20]
 8004ff4:	1d18      	adds	r0, r3, #4
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	062e      	lsls	r6, r5, #24
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0x1be>
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e002      	b.n	8005008 <_printf_i+0x1c4>
 8005002:	0668      	lsls	r0, r5, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0x1ba>
 8005006:	8019      	strh	r1, [r3, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	4616      	mov	r6, r2
 800500e:	e7bc      	b.n	8004f8a <_printf_i+0x146>
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	6032      	str	r2, [r6, #0]
 8005016:	681e      	ldr	r6, [r3, #0]
 8005018:	6862      	ldr	r2, [r4, #4]
 800501a:	2100      	movs	r1, #0
 800501c:	4630      	mov	r0, r6
 800501e:	f7fb f977 	bl	8000310 <memchr>
 8005022:	b108      	cbz	r0, 8005028 <_printf_i+0x1e4>
 8005024:	1b80      	subs	r0, r0, r6
 8005026:	6060      	str	r0, [r4, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2300      	movs	r3, #0
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005032:	e7aa      	b.n	8004f8a <_printf_i+0x146>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	4632      	mov	r2, r6
 8005038:	4649      	mov	r1, r9
 800503a:	4640      	mov	r0, r8
 800503c:	47d0      	blx	sl
 800503e:	3001      	adds	r0, #1
 8005040:	d0ad      	beq.n	8004f9e <_printf_i+0x15a>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d413      	bmi.n	8005070 <_printf_i+0x22c>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e7a6      	b.n	8004fa2 <_printf_i+0x15e>
 8005054:	2301      	movs	r3, #1
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d09d      	beq.n	8004f9e <_printf_i+0x15a>
 8005062:	3501      	adds	r5, #1
 8005064:	68e3      	ldr	r3, [r4, #12]
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	42ab      	cmp	r3, r5
 800506c:	dcf2      	bgt.n	8005054 <_printf_i+0x210>
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x204>
 8005070:	2500      	movs	r5, #0
 8005072:	f104 0619 	add.w	r6, r4, #25
 8005076:	e7f5      	b.n	8005064 <_printf_i+0x220>
 8005078:	0800578c 	.word	0x0800578c
 800507c:	0800579d 	.word	0x0800579d

08005080 <__swbuf_r>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	460e      	mov	r6, r1
 8005084:	4614      	mov	r4, r2
 8005086:	4605      	mov	r5, r0
 8005088:	b118      	cbz	r0, 8005092 <__swbuf_r+0x12>
 800508a:	6a03      	ldr	r3, [r0, #32]
 800508c:	b90b      	cbnz	r3, 8005092 <__swbuf_r+0x12>
 800508e:	f7ff fa33 	bl	80044f8 <__sinit>
 8005092:	69a3      	ldr	r3, [r4, #24]
 8005094:	60a3      	str	r3, [r4, #8]
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	071a      	lsls	r2, r3, #28
 800509a:	d501      	bpl.n	80050a0 <__swbuf_r+0x20>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	b943      	cbnz	r3, 80050b2 <__swbuf_r+0x32>
 80050a0:	4621      	mov	r1, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f82a 	bl	80050fc <__swsetup_r>
 80050a8:	b118      	cbz	r0, 80050b2 <__swbuf_r+0x32>
 80050aa:	f04f 37ff 	mov.w	r7, #4294967295
 80050ae:	4638      	mov	r0, r7
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	1a98      	subs	r0, r3, r2
 80050b8:	6963      	ldr	r3, [r4, #20]
 80050ba:	b2f6      	uxtb	r6, r6
 80050bc:	4283      	cmp	r3, r0
 80050be:	4637      	mov	r7, r6
 80050c0:	dc05      	bgt.n	80050ce <__swbuf_r+0x4e>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f7ff fcbd 	bl	8004a44 <_fflush_r>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d1ed      	bne.n	80050aa <__swbuf_r+0x2a>
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	60a3      	str	r3, [r4, #8]
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	701e      	strb	r6, [r3, #0]
 80050dc:	6962      	ldr	r2, [r4, #20]
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d004      	beq.n	80050ee <__swbuf_r+0x6e>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d5e1      	bpl.n	80050ae <__swbuf_r+0x2e>
 80050ea:	2e0a      	cmp	r6, #10
 80050ec:	d1df      	bne.n	80050ae <__swbuf_r+0x2e>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f7ff fca7 	bl	8004a44 <_fflush_r>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d0d9      	beq.n	80050ae <__swbuf_r+0x2e>
 80050fa:	e7d6      	b.n	80050aa <__swbuf_r+0x2a>

080050fc <__swsetup_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <__swsetup_r+0xa8>)
 8005100:	4605      	mov	r5, r0
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	460c      	mov	r4, r1
 8005106:	b118      	cbz	r0, 8005110 <__swsetup_r+0x14>
 8005108:	6a03      	ldr	r3, [r0, #32]
 800510a:	b90b      	cbnz	r3, 8005110 <__swsetup_r+0x14>
 800510c:	f7ff f9f4 	bl	80044f8 <__sinit>
 8005110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005114:	0719      	lsls	r1, r3, #28
 8005116:	d422      	bmi.n	800515e <__swsetup_r+0x62>
 8005118:	06da      	lsls	r2, r3, #27
 800511a:	d407      	bmi.n	800512c <__swsetup_r+0x30>
 800511c:	2209      	movs	r2, #9
 800511e:	602a      	str	r2, [r5, #0]
 8005120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	f04f 30ff 	mov.w	r0, #4294967295
 800512a:	e033      	b.n	8005194 <__swsetup_r+0x98>
 800512c:	0758      	lsls	r0, r3, #29
 800512e:	d512      	bpl.n	8005156 <__swsetup_r+0x5a>
 8005130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005132:	b141      	cbz	r1, 8005146 <__swsetup_r+0x4a>
 8005134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005138:	4299      	cmp	r1, r3
 800513a:	d002      	beq.n	8005142 <__swsetup_r+0x46>
 800513c:	4628      	mov	r0, r5
 800513e:	f7ff fafd 	bl	800473c <_free_r>
 8005142:	2300      	movs	r3, #0
 8005144:	6363      	str	r3, [r4, #52]	@ 0x34
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	2300      	movs	r3, #0
 8005150:	6063      	str	r3, [r4, #4]
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	b94b      	cbnz	r3, 8005176 <__swsetup_r+0x7a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516c:	d003      	beq.n	8005176 <__swsetup_r+0x7a>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f883 	bl	800527c <__smakebuf_r>
 8005176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517a:	f013 0201 	ands.w	r2, r3, #1
 800517e:	d00a      	beq.n	8005196 <__swsetup_r+0x9a>
 8005180:	2200      	movs	r2, #0
 8005182:	60a2      	str	r2, [r4, #8]
 8005184:	6962      	ldr	r2, [r4, #20]
 8005186:	4252      	negs	r2, r2
 8005188:	61a2      	str	r2, [r4, #24]
 800518a:	6922      	ldr	r2, [r4, #16]
 800518c:	b942      	cbnz	r2, 80051a0 <__swsetup_r+0xa4>
 800518e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005192:	d1c5      	bne.n	8005120 <__swsetup_r+0x24>
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	0799      	lsls	r1, r3, #30
 8005198:	bf58      	it	pl
 800519a:	6962      	ldrpl	r2, [r4, #20]
 800519c:	60a2      	str	r2, [r4, #8]
 800519e:	e7f4      	b.n	800518a <__swsetup_r+0x8e>
 80051a0:	2000      	movs	r0, #0
 80051a2:	e7f7      	b.n	8005194 <__swsetup_r+0x98>
 80051a4:	2400002c 	.word	0x2400002c

080051a8 <_raise_r>:
 80051a8:	291f      	cmp	r1, #31
 80051aa:	b538      	push	{r3, r4, r5, lr}
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	d904      	bls.n	80051bc <_raise_r+0x14>
 80051b2:	2316      	movs	r3, #22
 80051b4:	6003      	str	r3, [r0, #0]
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80051be:	b112      	cbz	r2, 80051c6 <_raise_r+0x1e>
 80051c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051c4:	b94b      	cbnz	r3, 80051da <_raise_r+0x32>
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f830 	bl	800522c <_getpid_r>
 80051cc:	4622      	mov	r2, r4
 80051ce:	4601      	mov	r1, r0
 80051d0:	4628      	mov	r0, r5
 80051d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d6:	f000 b817 	b.w	8005208 <_kill_r>
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d00a      	beq.n	80051f4 <_raise_r+0x4c>
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	d103      	bne.n	80051ea <_raise_r+0x42>
 80051e2:	2316      	movs	r3, #22
 80051e4:	6003      	str	r3, [r0, #0]
 80051e6:	2001      	movs	r0, #1
 80051e8:	e7e7      	b.n	80051ba <_raise_r+0x12>
 80051ea:	2100      	movs	r1, #0
 80051ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80051f0:	4620      	mov	r0, r4
 80051f2:	4798      	blx	r3
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7e0      	b.n	80051ba <_raise_r+0x12>

080051f8 <raise>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	@ (8005204 <raise+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f7ff bfd3 	b.w	80051a8 <_raise_r>
 8005202:	bf00      	nop
 8005204:	2400002c 	.word	0x2400002c

08005208 <_kill_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	@ (8005228 <_kill_r+0x20>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fc fba9 	bl	800196c <_kill>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d102      	bne.n	8005224 <_kill_r+0x1c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	b103      	cbz	r3, 8005224 <_kill_r+0x1c>
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	24000274 	.word	0x24000274

0800522c <_getpid_r>:
 800522c:	f7fc bb96 	b.w	800195c <_getpid>

08005230 <__swhatbuf_r>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	2900      	cmp	r1, #0
 800523a:	b096      	sub	sp, #88	@ 0x58
 800523c:	4615      	mov	r5, r2
 800523e:	461e      	mov	r6, r3
 8005240:	da0d      	bge.n	800525e <__swhatbuf_r+0x2e>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	bf14      	ite	ne
 800524e:	2340      	movne	r3, #64	@ 0x40
 8005250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005254:	2000      	movs	r0, #0
 8005256:	6031      	str	r1, [r6, #0]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	b016      	add	sp, #88	@ 0x58
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	466a      	mov	r2, sp
 8005260:	f000 f848 	bl	80052f4 <_fstat_r>
 8005264:	2800      	cmp	r0, #0
 8005266:	dbec      	blt.n	8005242 <__swhatbuf_r+0x12>
 8005268:	9901      	ldr	r1, [sp, #4]
 800526a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800526e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005272:	4259      	negs	r1, r3
 8005274:	4159      	adcs	r1, r3
 8005276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800527a:	e7eb      	b.n	8005254 <__swhatbuf_r+0x24>

0800527c <__smakebuf_r>:
 800527c:	898b      	ldrh	r3, [r1, #12]
 800527e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005280:	079d      	lsls	r5, r3, #30
 8005282:	4606      	mov	r6, r0
 8005284:	460c      	mov	r4, r1
 8005286:	d507      	bpl.n	8005298 <__smakebuf_r+0x1c>
 8005288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	2301      	movs	r3, #1
 8005292:	6163      	str	r3, [r4, #20]
 8005294:	b003      	add	sp, #12
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005298:	ab01      	add	r3, sp, #4
 800529a:	466a      	mov	r2, sp
 800529c:	f7ff ffc8 	bl	8005230 <__swhatbuf_r>
 80052a0:	9f00      	ldr	r7, [sp, #0]
 80052a2:	4605      	mov	r5, r0
 80052a4:	4639      	mov	r1, r7
 80052a6:	4630      	mov	r0, r6
 80052a8:	f7ff fabc 	bl	8004824 <_malloc_r>
 80052ac:	b948      	cbnz	r0, 80052c2 <__smakebuf_r+0x46>
 80052ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b2:	059a      	lsls	r2, r3, #22
 80052b4:	d4ee      	bmi.n	8005294 <__smakebuf_r+0x18>
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	e7e2      	b.n	8005288 <__smakebuf_r+0xc>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	6020      	str	r0, [r4, #0]
 80052c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052d2:	b15b      	cbz	r3, 80052ec <__smakebuf_r+0x70>
 80052d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 f81d 	bl	8005318 <_isatty_r>
 80052de:	b128      	cbz	r0, 80052ec <__smakebuf_r+0x70>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	431d      	orrs	r5, r3
 80052f0:	81a5      	strh	r5, [r4, #12]
 80052f2:	e7cf      	b.n	8005294 <__smakebuf_r+0x18>

080052f4 <_fstat_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	@ (8005314 <_fstat_r+0x20>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	602b      	str	r3, [r5, #0]
 8005302:	f7fc fb93 	bl	8001a2c <_fstat>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d102      	bne.n	8005310 <_fstat_r+0x1c>
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	b103      	cbz	r3, 8005310 <_fstat_r+0x1c>
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	bd38      	pop	{r3, r4, r5, pc}
 8005312:	bf00      	nop
 8005314:	24000274 	.word	0x24000274

08005318 <_isatty_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d06      	ldr	r5, [pc, #24]	@ (8005334 <_isatty_r+0x1c>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fc fb92 	bl	8001a4c <_isatty>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_isatty_r+0x1a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_isatty_r+0x1a>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	24000274 	.word	0x24000274

08005338 <sinf_poly>:
 8005338:	07cb      	lsls	r3, r1, #31
 800533a:	d412      	bmi.n	8005362 <sinf_poly+0x2a>
 800533c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8005340:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8005344:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8005348:	eea6 7b01 	vfma.f64	d7, d6, d1
 800534c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8005350:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005354:	eea6 0b05 	vfma.f64	d0, d6, d5
 8005358:	eea7 0b01 	vfma.f64	d0, d7, d1
 800535c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005360:	4770      	bx	lr
 8005362:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8005366:	ee21 5b01 	vmul.f64	d5, d1, d1
 800536a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800536e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8005372:	eea1 7b06 	vfma.f64	d7, d1, d6
 8005376:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800537a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800537e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8005382:	ee21 1b05 	vmul.f64	d1, d1, d5
 8005386:	eea5 0b06 	vfma.f64	d0, d5, d6
 800538a:	e7e5      	b.n	8005358 <sinf_poly+0x20>
 800538c:	0000      	movs	r0, r0
	...

08005390 <sinf>:
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	ee10 4a10 	vmov	r4, s0
 8005396:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800539a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800539e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80053a2:	eef0 7a40 	vmov.f32	s15, s0
 80053a6:	d218      	bcs.n	80053da <sinf+0x4a>
 80053a8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80053ac:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80053b0:	d20a      	bcs.n	80053c8 <sinf+0x38>
 80053b2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80053b6:	d103      	bne.n	80053c0 <sinf+0x30>
 80053b8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80053bc:	ed8d 1a01 	vstr	s2, [sp, #4]
 80053c0:	eeb0 0a67 	vmov.f32	s0, s15
 80053c4:	b003      	add	sp, #12
 80053c6:	bd30      	pop	{r4, r5, pc}
 80053c8:	483b      	ldr	r0, [pc, #236]	@ (80054b8 <sinf+0x128>)
 80053ca:	eeb0 0b46 	vmov.f64	d0, d6
 80053ce:	2100      	movs	r1, #0
 80053d0:	b003      	add	sp, #12
 80053d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053d6:	f7ff bfaf 	b.w	8005338 <sinf_poly>
 80053da:	f240 422e 	movw	r2, #1070	@ 0x42e
 80053de:	4293      	cmp	r3, r2
 80053e0:	d824      	bhi.n	800542c <sinf+0x9c>
 80053e2:	4b35      	ldr	r3, [pc, #212]	@ (80054b8 <sinf+0x128>)
 80053e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80053e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80053f0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80053f4:	ee17 1a90 	vmov	r1, s15
 80053f8:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80053fc:	1609      	asrs	r1, r1, #24
 80053fe:	ee07 1a90 	vmov	s15, r1
 8005402:	f001 0203 	and.w	r2, r1, #3
 8005406:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800540a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800540e:	ed92 0b00 	vldr	d0, [r2]
 8005412:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8005416:	f011 0f02 	tst.w	r1, #2
 800541a:	eea5 6b47 	vfms.f64	d6, d5, d7
 800541e:	bf08      	it	eq
 8005420:	4618      	moveq	r0, r3
 8005422:	ee26 1b06 	vmul.f64	d1, d6, d6
 8005426:	ee20 0b06 	vmul.f64	d0, d0, d6
 800542a:	e7d1      	b.n	80053d0 <sinf+0x40>
 800542c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8005430:	d237      	bcs.n	80054a2 <sinf+0x112>
 8005432:	4922      	ldr	r1, [pc, #136]	@ (80054bc <sinf+0x12c>)
 8005434:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8005438:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800543c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8005440:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8005444:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005448:	6a10      	ldr	r0, [r2, #32]
 800544a:	6912      	ldr	r2, [r2, #16]
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005450:	40ab      	lsls	r3, r5
 8005452:	fba0 5003 	umull	r5, r0, r0, r3
 8005456:	4359      	muls	r1, r3
 8005458:	fbe3 0102 	umlal	r0, r1, r3, r2
 800545c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8005460:	0f9d      	lsrs	r5, r3, #30
 8005462:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005466:	1ac9      	subs	r1, r1, r3
 8005468:	f7fb f930 	bl	80006cc <__aeabi_l2d>
 800546c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8005470:	4b11      	ldr	r3, [pc, #68]	@ (80054b8 <sinf+0x128>)
 8005472:	f004 0203 	and.w	r2, r4, #3
 8005476:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800547a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80054b0 <sinf+0x120>
 800547e:	ed92 0b00 	vldr	d0, [r2]
 8005482:	ec41 0b17 	vmov	d7, r0, r1
 8005486:	f014 0f02 	tst.w	r4, #2
 800548a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800548e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005492:	4629      	mov	r1, r5
 8005494:	bf08      	it	eq
 8005496:	4618      	moveq	r0, r3
 8005498:	ee27 1b07 	vmul.f64	d1, d7, d7
 800549c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80054a0:	e796      	b.n	80053d0 <sinf+0x40>
 80054a2:	b003      	add	sp, #12
 80054a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a8:	f000 b8e4 	b.w	8005674 <__math_invalidf>
 80054ac:	f3af 8000 	nop.w
 80054b0:	54442d18 	.word	0x54442d18
 80054b4:	3c1921fb 	.word	0x3c1921fb
 80054b8:	08005810 	.word	0x08005810
 80054bc:	080057b0 	.word	0x080057b0

080054c0 <sinf_poly>:
 80054c0:	07cb      	lsls	r3, r1, #31
 80054c2:	d412      	bmi.n	80054ea <sinf_poly+0x2a>
 80054c4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80054c8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80054cc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80054d0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80054d4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80054d8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80054dc:	eea6 0b05 	vfma.f64	d0, d6, d5
 80054e0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80054e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80054e8:	4770      	bx	lr
 80054ea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80054ee:	ee21 5b01 	vmul.f64	d5, d1, d1
 80054f2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80054f6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80054fa:	eea1 7b06 	vfma.f64	d7, d1, d6
 80054fe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8005502:	eea1 0b06 	vfma.f64	d0, d1, d6
 8005506:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800550a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800550e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8005512:	e7e5      	b.n	80054e0 <sinf_poly+0x20>
 8005514:	0000      	movs	r0, r0
	...

08005518 <cosf>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	ee10 4a10 	vmov	r4, s0
 800551e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005522:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8005526:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800552a:	d21f      	bcs.n	800556c <cosf+0x54>
 800552c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8005530:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8005534:	f0c0 8082 	bcc.w	800563c <cosf+0x124>
 8005538:	ee27 4b07 	vmul.f64	d4, d7, d7
 800553c:	4b44      	ldr	r3, [pc, #272]	@ (8005650 <cosf+0x138>)
 800553e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8005542:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8005546:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800554a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800554e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8005552:	eea7 0b05 	vfma.f64	d0, d7, d5
 8005556:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800555a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800555e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8005562:	eea6 0b07 	vfma.f64	d0, d6, d7
 8005566:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8005570:	4293      	cmp	r3, r2
 8005572:	d829      	bhi.n	80055c8 <cosf+0xb0>
 8005574:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <cosf+0x138>)
 8005576:	ed93 6b08 	vldr	d6, [r3, #32]
 800557a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800557e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8005582:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8005586:	ee16 1a90 	vmov	r1, s13
 800558a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800558e:	1609      	asrs	r1, r1, #24
 8005590:	ee06 1a90 	vmov	s13, r1
 8005594:	f001 0203 	and.w	r2, r1, #3
 8005598:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800559c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80055a0:	ed92 0b00 	vldr	d0, [r2]
 80055a4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80055a8:	f011 0f02 	tst.w	r1, #2
 80055ac:	f081 0101 	eor.w	r1, r1, #1
 80055b0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80055b4:	bf08      	it	eq
 80055b6:	4618      	moveq	r0, r3
 80055b8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80055bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80055c4:	f7ff bf7c 	b.w	80054c0 <sinf_poly>
 80055c8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80055cc:	d232      	bcs.n	8005634 <cosf+0x11c>
 80055ce:	4921      	ldr	r1, [pc, #132]	@ (8005654 <cosf+0x13c>)
 80055d0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80055d4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80055d8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80055dc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80055e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80055e4:	6a10      	ldr	r0, [r2, #32]
 80055e6:	6912      	ldr	r2, [r2, #16]
 80055e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055ec:	40ab      	lsls	r3, r5
 80055ee:	fba0 5003 	umull	r5, r0, r0, r3
 80055f2:	4359      	muls	r1, r3
 80055f4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80055f8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80055fc:	0f9d      	lsrs	r5, r3, #30
 80055fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005602:	1ac9      	subs	r1, r1, r3
 8005604:	f7fb f862 	bl	80006cc <__aeabi_l2d>
 8005608:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800560c:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <cosf+0x138>)
 800560e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8005648 <cosf+0x130>
 8005612:	ec41 0b17 	vmov	d7, r0, r1
 8005616:	f004 0203 	and.w	r2, r4, #3
 800561a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800561e:	ed92 0b00 	vldr	d0, [r2]
 8005622:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005626:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800562a:	f014 0f02 	tst.w	r4, #2
 800562e:	f085 0101 	eor.w	r1, r5, #1
 8005632:	e7bf      	b.n	80055b4 <cosf+0x9c>
 8005634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005638:	f000 b81c 	b.w	8005674 <__math_invalidf>
 800563c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005640:	e793      	b.n	800556a <cosf+0x52>
 8005642:	bf00      	nop
 8005644:	f3af 8000 	nop.w
 8005648:	54442d18 	.word	0x54442d18
 800564c:	3c1921fb 	.word	0x3c1921fb
 8005650:	08005810 	.word	0x08005810
 8005654:	080057b0 	.word	0x080057b0

08005658 <with_errnof>:
 8005658:	b510      	push	{r4, lr}
 800565a:	ed2d 8b02 	vpush	{d8}
 800565e:	eeb0 8a40 	vmov.f32	s16, s0
 8005662:	4604      	mov	r4, r0
 8005664:	f7ff f810 	bl	8004688 <__errno>
 8005668:	eeb0 0a48 	vmov.f32	s0, s16
 800566c:	ecbd 8b02 	vpop	{d8}
 8005670:	6004      	str	r4, [r0, #0]
 8005672:	bd10      	pop	{r4, pc}

08005674 <__math_invalidf>:
 8005674:	eef0 7a40 	vmov.f32	s15, s0
 8005678:	ee30 7a40 	vsub.f32	s14, s0, s0
 800567c:	eef4 7a67 	vcmp.f32	s15, s15
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8005688:	d602      	bvs.n	8005690 <__math_invalidf+0x1c>
 800568a:	2021      	movs	r0, #33	@ 0x21
 800568c:	f7ff bfe4 	b.w	8005658 <with_errnof>
 8005690:	4770      	bx	lr
	...

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
